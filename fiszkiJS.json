[{"page_number": 0, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy setTimeout() a setInterval()?\n01"}, {"page_number": 1, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plsetTimeout to funkcja, kt\u00f3ra wykonuje kod lub funkcj\u0119 raz  \npo okre\u015blonym czasie wyra\u017conym w milisekundach.\nsetTimeout (function  () {\n    console.log('Done after one second! ');\n}, 1000);\nsetInterval to funkcja, kt\u00f3ra wykonuje kod lub funkcj\u0119 \ncyklicznie co okre\u015blony czas, zaczynaj\u0105c po pierwszym okresie. Funkcja zwraca identifikator, kt\u00f3rego mo\u017cna u\u017cy\u0107 do przerwania dzia\u0142ania za pomoc\u0105 clearInterval().\nconst intervalID  = setInterval (function  () {\n    console.log('Done every second... ');\n}, 1000);\n// clearInterval(intervalID); // Przerwanie"}, {"page_number": 2, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy == i ===?\n02"}, {"page_number": 3, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPodw\u00f3jny znak r\u00f3wno\u015bci == (equality) sprawdza r\u00f3wno\u015b\u0107 \ndw\u00f3ch wyra\u017ce\u0144 lub warto\u015bci. Przed por\u00f3wnaniem pr\u00f3buje je przekonwertowa\u0107 do tego samego typu.\nPotr\u00f3jny znak r\u00f3wno\u015bci === (identity) por\u00f3wnuje dodat -\nkowo zgodno\u015b\u0107 typ\u00f3w, ale nie dokonuje konwersji. \nx y x == y x === y\n5 5 true true\n1 '1' true false\nnull undefined true false\n0 false true false\n\u20181,2\u2019 [1,2] true false"}, {"page_number": 4, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak wyczy\u015bci\u0107  \ntablic\u0119?\n03"}, {"page_number": 5, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl1) Nadpisanie tablicy pust\u0105 tablic\u0105:\ntlet arr = ['hello ', 'world '];\narr = [];\nconsole.log(arr);  // []\n2) Ustawienie w\u0142a\u015bciwo\u015bci length tablicy na warto\u015b\u0107 0:\ntlet arr = ['hello ', 'world '];\narr.length = 0;\nconsole.log(arr);  // []\n3) Wykorzystanie metody splice, kt\u00f3ra mo\u017ce by\u0107 u\u017cyta do \nusuwania element\u00f3w z tablicy (splice modyfikuje tablic\u0119 i zwraca usuni\u0119te elementy:\ntlet arr = ['hello ', 'world '];\nlet removed = arr.splice(0, arr.length);\nconsole.log(arr);  // []\nconsole.log(removed); // [\"hello\", \"world\"]"}, {"page_number": 6, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCzym si\u0119 r\u00f3\u017cni\u0105 \nlet i var?\n04"}, {"page_number": 7, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plR\u00f3\u017cnica dotyczy zasi\u0119gu w jakim zadeklarowana jest zmienna\n\u2022 var deklaruje zmienn\u0105 dla ca\u0142ej funkcji (function scope)\n\u2022 let deklaruje zmienn\u0105 dla bloku (block scope)\nDodatkowo, wszystkie deklaracje (function, var, let, const  \ni class) s\u0105 hoistowane, ale tylko var  s\u0105 inicjalizowane przez un-\ndefined - let i const pozostaj\u0105 niezainicjalizowane. \ntfunction  saveCourse (courseData ) {\n  if (courseData ) {\n    console.log(maxStudents);  //\u00a0undefined\n    console.log(courseLength); // ReferenceError\n    var maxStudents = 12;      // function scope\n    let courseLength = 30;     // block scope\n  }\n  console .log(maxStudents);    // 12\n  console .log(courseLength);  } // ReferenceError\n}"}, {"page_number": 8, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJakie s\u0105 typy \ndanych w JS?\n05"}, {"page_number": 9, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW JavaScript wyr\u00f3\u017cniamy 9 typ\u00f3w:\nundefined typeof undefined === \"undefined\"\nBoolean   typeof true === \"boolean\"\nNumber    typeof 2 === \"number\"\nString    typeof \"2\" === \"string\"\nBigInt    typeof 2n === \"bigint\"\nSymbol    typeof Symbol(\"id\") === \"symbol\"\nnull      typeof null === \"object\"\nObject    typeof new Object() === \"object\"\nFunction   typeof alert === \"object\"  \n          operator typeof wskazuje, \u017ce jest to object,  \n                          jednak wynika to z faktu, \u017ce ka\u017cdy  \n                          konstruktor funkcji dziedziczy po                            konstruktorze Object."}, {"page_number": 10, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak utworzy\u0107 \nobiekt?\n06"}, {"page_number": 11, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pltfunction  Course(courseTitle ) {\n    this.title = courseTitle ;\n}\n//\u00a01.\u00a0Za\u00a0pomoc\u0105\u00a0konstruktoraconst jsCourse  = new Course('JS');           \n//\u00a02.\u00a0Za\u00a0pomoc\u0105\u00a0 Object Literal\nconst angularCourse  = { title : 'Angular ' };\n  //\u00a03.\u00a0Za\u00a0pomoc\u0105\u00a0 new Object\nconst reactCourse  = new Object();            \nreactCourse .title = 'React '; \n              //\u00a04.\u00a0Za\u00a0pomoc\u0105\u00a0 Object.create\nconst vueCourse  = Object .create(jsCourse );   \nvueCourse .title = 'Vue';"}, {"page_number": 12, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJakie znasz  \nfalsy values?\n07"}, {"page_number": 13, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFalsy values s\u0105 to warto\u015bci, kt\u00f3re s\u0105 traktowane tak samo jak \nfalse, gdy s\u0105 u\u017cyte w kontek\u015bcie Boolean, np. w instrukcji if.\nJavaScript u\u017cywa konwersji typ\u00f3w  rzutuj\u0105c ka\u017cd\u0105 warto\u015b\u0107 na \nBoolean w sytuacjach, kt\u00f3re tego wymagaj\u0105, np. w instrukcji warunkowej if lub p\u0119tlach. Wyr\u00f3\u017cniamy 8 falsy values:\n  false         Domy\u015blna warto\u015b\u0107 boolean\n  null          Brak warto\u015bci\n  undefined     Warto\u015b\u0107 niezdefiniowana\n  NaN           Not a number , np. \"abc\" / 4\n  \u201c\u201c            Pusty string\n  0             Liczba 0\n -0             Liczba -0\n  0n            Warto\u015b\u0107 0 jako BigInt"}, {"page_number": 14, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo r\u00f3\u017cni \nnull od undefined?\n08"}, {"page_number": 15, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW \u015bwiecie JS undefined oznacza zmienn\u0105, kt\u00f3ra zosta\u0142a za-\ndeklarowana, ale nie posiada jeszcze warto\u015bci, na przyk\u0142ad:\nZ kolei null jest warto\u015bci\u0105, kt\u00f3ra mo\u017ce zosta\u0107 przypisana do \nzmiennej, kt\u00f3ra nie posiada \u017cadnej warto\u015bci:tlet courseLength;\nconsole.log(courseLength);        //\u00a0undefined\nconsole.log(typeof courseLength); //\u00a0\"undefined\"\ntlet courseContent = null;\nconsole.log(courseContent);        // null\nconsole.log(typeof courseContent); // \"object\"\nconsole.log(null === undefined );    // false\nconsole.log(null == undefined );     // true"}, {"page_number": 16, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCzym jest spread \noperator?\n09"}, {"page_number": 17, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSpread operator pozwala rozwin\u0105\u0107 wyra\u017cenie w miejscach, \ngdzie potrzebne jest wiele argument\u00f3w (do wywo\u0142a\u0144 funkc -\nji), wiele element\u00f3w (tworzenie tablic) lub wiele zmiennych. \ntconst results  = [5, 5, 4];\nfunction  calculateResults (a, b, c) {\n    return a + b + c;\n}\ncalculateResults (5, 5, 4);    // 14\ncalculateResults (...results); // 14\nvar courses = ['Vue', 'React ', 'Angular '];\nconst\u00a0[firstCourse,\u00a0 ...allTheRest] = courses;\nconsole.log(firstCourse);\u00a0 // \"Vue\"\nconsole.log(allTheRest); // [\"React\", \"Angular\"]\nconsole.log([...firstCourse]); // [\"V\", \"u\", \"e\"]"}, {"page_number": 18, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCzym jest rest \noperator?\n10"}, {"page_number": 19, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plRest operator wygl\u0105da dok\u0142adnie tak samo jak Spread oper-\nator, ale jest u\u017cywany do destrukturyzacji obiekt\u00f3w i tablic. \nW przeciwie\u0144stwie do Spread operatora, pakuje wiele ele-\nment\u00f3w w jeden: \ntfunction  sum(...results) {\n    return results .reduce((a, b) => a + b);\n}\nsum(5)                 //  5\nsum(5, 5)              // 10\nsum(5, 5, 4, 3, 1, 5); // 23"}, {"page_number": 20, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo oznacza NaN?\n11"}, {"page_number": 21, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNaN reprezentuje warto\u015b\u0107, kt\u00f3ra nie jest liczb\u0105, przyk\u0142adowo:\nDo sprawdzenia czy zmienna lub wyra\u017cenie zawiera NaN, \nmo\u017cemy skorzysta\u0107 z funkcji Number.isNan()\nCo ciekawe NaN nigdy nie jest r\u00f3wna innej liczbie, nie jest \nr\u00f3wna nawet samej sobie:t'abc' / 4                   // NaN\ntNumber.isNan('abc' / 4);   // true\nNumber.isNan('100');       // false\ntconsole.log(NaN == NaN);  // false\nconsole.log(NaN === NaN); // false\nconsole.log(typeof NaN);  // \"number\""}, {"page_number": 22, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak poprawnie  \nstworzy\u0107 URL?\n12"}, {"page_number": 23, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby stworzy\u0107 poprawny adres URL mo\u017cna skorztysta\u0107 z \nfunkcji encodeURI, kt\u00f3ra zakoduje wszystkie znaki specjalne \nza wyj\u0105tkiem < , / ? : @ & = + $ #> . \nW drug\u0105 stron\u0119, aby odczyta\u0107 adres URI zakodowany przez \nencodeURI mo\u017cna skorzysta\u0107 z decodeURI. Funkcja rzuca wy-\nj\u0105tek w przypadku, gdy nie mo\u017cna poprawnie odczyta\u0107 adresu URI.\ntconst uri = 'https://example.com/\u0105\u0119 ';\nconst encodedURI  = encodeURI (uri);\nconsole.log(encodedURI );  \n// https://example.com/%C4%85%C4%99\nconsole.log(decodeURI (encodedURI )); \n//\u00a0https://example.com/\u0105\u0119"}, {"page_number": 24, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo odr\u00f3\u017cnia  \ncall od apply?\n13"}, {"page_number": 25, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plR\u00f3\u017cnica pomi\u0119dzy call a apply polega jedynie na tym, \u017ce call \nprzyjmuje argumenty w postaci pojedynczych warto\u015bci:Funkcje call i apply s\u0142u\u017ca do podmiany kontekstu wykonania \nfunkcji, czyli podmian\u0119 wska\u017anika this, przez co mo\u017cliwe jest \nwywo\u0142anie funkcji zdefiniowanej w obiekcie A na obiekcie B.\nFunkcja apply wywo\u0142uje funkcj\u0119 u\u017cywaj\u0105c do tego prze-\nkazanej warto\u015bci this oraz listy argument\u00f3w przekazanej  \nw formie tablicy:\nt\ntconst numbers  = [1, 2], others = [3, 4];\nnumbers.push.apply(numbers , others );\nconsole.log(numbers );   // [1, 2, 3, 4]\nconst numbers  = [1, 2], others = [3, 4];\nnumbers.push.call(numbers , ...others);\nconsole.log(numbers );  // [1, 2, 3, 4]"}, {"page_number": 26, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nDo czego s\u0142u\u017cy \nfunkcja bind?\n14"}, {"page_number": 27, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcja bind, w por\u00f3wnaniu do call i apply nie zwraca wyni-\nku, ale funkcj\u0119, kt\u00f3r\u0105 mo\u017cna wywo\u0142a\u0107 w przysz\u0142o\u015bci. \nDzi\u0119ki powi\u0105zaniu z this funkcja ta - niezale\u017cnie kiedy \nzostanie wywo\u0142ana - b\u0119dzie zna\u0142a poprawn\u0105 warto\u015b\u0107 this z momentu kiedy zosta\u0142a utworzona. \nDzi\u0119ki takiemu zachowaniu, bind stosuje si\u0119 do obs\u0142ugi asyn-\nchronicznej event\u00f3w.\ntconst numbers  = [1, 2];\nconst addFn = numbers .push.bind(numbers );\naddFn(3);\naddFn(4);\nconsole.log(numbers );  // [1, 2, 3, 4]"}, {"page_number": 28, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo r\u00f3\u017cni \nslice i splice?\n15"}, {"page_number": 29, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW JavaScript funkcje slice oraz splice s\u0105 cz\u0119sto mylone. \nMimo \u017ce maj\u0105 bardzo podobne nazwy, maj\u0105 zupe\u0142nie inne zadania:\nslice splice\nNie modyfikuje tablicy Modyfikuje tablic\u0119\nZwraca cz\u0119\u015b\u0107 tablicy jako now\u0105 tablic\u0119Zwraca usuni\u0119te elementy tablicy\nS\u0142u\u017cy do wybierania ele-ment\u00f3w z tablicyS\u0142u\u017cy do dodawania lub usu-wania element\u00f3w z listy"}, {"page_number": 30, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym jest \nscope?\n16"}, {"page_number": 31, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plScope jest to zakres zmiennych, kt\u00f3ry okre\u015bla ich widoczno\u015b\u0107 \ni dost\u0119pno\u015b\u0107 w r\u00f3\u017cnych miejscach kodu. Jest zale\u017cny od sposobu, w jaki zostan\u0105 zadeklarowane.\nPrzy pomocy s\u0142owa kluczowego let deklarujemy lokalne zmi-\nenne w ramach block scope. Zakres zmiennych jest ogranic -\nzony tylko do bloku kodu, w kt\u00f3rym zosta\u0142y zadeklarowane.\nS\u0142owo kluczowe const s\u0142u\u017cy do deklarowania sta\u0142ych. Ich \nzakres jest analogiczny do zmiennych zadeklarowanych przy pomocy let a r\u00f3\u017cnica polega na tym, \u017ce warto\u015b\u0107 raz przypisa-na const nie mo\u017ce zosta\u0107 ju\u017c zmodyfikowana.\nZa pomoc\u0105 var  mo\u017cna definiowa\u0107 zmienne, kt\u00f3re s\u0105 wi-\ndoczne wewn\u0105trz funkcji nawet po opuszczeniu bloku, w \nkt\u00f3rym zosta\u0142y zdefiniowane. Zakres tych zmiennych ogranic -\nzony jest do funkcji, tzw. function scope, lub do przestrzeni globalnej, je\u017celi by\u0142y zadeklarowane poza funkcj\u0105."}, {"page_number": 32, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJakie znasz \ntypy scope?\n17"}, {"page_number": 33, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW JavaScript wyr\u00f3\u017cniamy trzy rodzaje scope:\n Global scope    zmienne poza obr\u0119bem funkcji\n Function scope  zmienne w obr\u0119bie funkcji\n Block scope     wprowadzony w ES6 ogranicza  \n                 widoczno\u015b\u0107 do bloku kodu\ntfunction  foo(courseData ) {\n    let maxStudents = 10;\n    var numLessons = 10;\n    if (courseData ) {\n        let maxStudents = 4;  // block scope\n        var numLessons = 4;   // function scope\n    }\n    console.log(maxStudents); //\u00a0Wy\u015bwietla\u00a010\n    console.log(numLessons);  //\u00a0Wy\u015bwietla\u00a04\n}"}, {"page_number": 34, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest  \ndziedziczenie  prototypowe?\n18"}, {"page_number": 35, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDziedziczenie prototypowe jest mechanizmem za pomoc\u0105 \nkt\u00f3rego obiekty dziedzicz\u0105 w\u0142a\u015bciwo\u015bci i metody po obiek -\ntach - rodzicach. Prototype jest obiektem kt\u00f3ry s\u0142u\u017cy jako szablon podczas tworzenia innych obiektow.\ntfunction  Animal(name) {\n    this.name = name;\n}\nfunction  Dog(name) {\n\u00a0\u00a0\u00a0\u00a0//\u00a0Podczas\u00a0tworzenia\u00a0Dog,\u00a0wywo\u0142ywany\u00a0jest\u00a0konstruktor\u00a0Animal    Animal.call(this, name);\n}// Dog dziedziczy po AnimalDog.prototype = Object .create(Animal.prototype );  \nAnimal.prototype .getName  = function  () {\n    return 'Hello, ' + this .name;\n}\n//\u00a0Mimo\u00a0\u017ce\u00a0'name'\u00a0jest\u00a0zapisane\u00a0w\u00a0Animal,\u00a0Dog\u00a0ma\u00a0do\u00a0niego\u00a0dost\u0119p\nvar dog = new Dog('Husky');\nconsole.log(dog.getName()); // 'Husky'"}, {"page_number": 36, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest  \nhoisting?\n19"}, {"page_number": 37, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plHoisting to mechanizm JavaScript przenosz\u0105cy deklaracje \nfunkcji oraz zmiennych na sam\u0105 g\u00f3r\u0119, tzn. do zasi\u0119gu funkcji, lub globalnego zasi\u0119gu. \nPrzenoszone s\u0105 deklaracje a nie definicje funkcji oraz zmi-\nennych.\ntvar x = 1;                // inicjalizacja x\nconsole.log(x + ' ' + y); //\u00a0'1\u00a0undefined'\nvar y = 2;                // inicjalizacja y\nCo dla interpretera jest r\u00f3wnoznaczne z:\ntvar x = 1;                // inicjalizacja x\nvar y;                    // deklaracja y\nconsole.log(x + ' ' + y); //\u00a0'1\u00a0undefined'\ny = 2;                    // inicjalizacja y"}, {"page_number": 38, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest  \nclosure?\n20"}, {"page_number": 39, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plClosure, czyli domkni\u0119cie to funkcja wewn\u0119trzna, kt\u00f3ra ma \ndost\u0119p do a) zmiennych, kt\u00f3re sama definiuje, b) zmiennych \nw scope funkcji zewn\u0119trznej, c) zmiennych globalnych.\nW przyk\u0142adzie poni\u017cej funkcja add10 stanowi domkni\u0119cie \n(funkcj\u0119 wewn\u0119trzn\u0105) funkcji add (zewn\u0119trznej). \nPomimo \u017ce podczas wywo\u0142ania funkcji add10(20) i add10(50) \nprzekazujemy tylko jeden parametr, domkni\u0119cie zwraca poprawny wynik dzia\u0142ania. Warto\u015b\u0107 10 jest w scope funkcji ze-wn\u0119trznej add. Zosta\u0142a zapami\u0119tana w momencie wywo\u0142ania add(10), dzi\u0119ki czemu jest dost\u0119pna w domkni\u0119ciu. \ntconst add = x => y => x + y;\nconst add10 = add(10);\nconsole.log(add10(20)); // 30\nconsole.log(add10(50)); // 60"}, {"page_number": 40, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest IIFE?\n21"}, {"page_number": 41, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plIIFE (Immediately Invoked Function Expression) to funkcja, \nkt\u00f3ra jest wykonywana bezpo\u015brednio po jej odczytaniu. \nU\u017cywa si\u0119 jej, aby zapobiec wydostawaniu si\u0119 zmiennych do \nzewn\u0119trznego scope. IIFE mo\u017ce przyjmowa\u0107 argumenty oraz zwraca\u0107 wynik:\nZmienna tempMsg nie jest dost\u0119pna poza scope IIFE.tvar message = (function  () {\n    var tempMsg = 'hello ';\n    return tempMsg;\n})();\nconsole.log(message) // 'hello'"}, {"page_number": 42, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJak zmieni\u0107  \nkontekst wywo\u0142ania funkcji?\n22"}, {"page_number": 43, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZmiana kontekstu wywo\u0142ania funkcji polega na wywo\u0142aniu \nmetody z jednej klasy na obiekcie innej klasy. Mo\u017cna to zrobi\u0107 przez podmian\u0119 wska\u017anika this za pomoca funkcji call, apply lub bind.\ntconst cat = {\n    name : 'Kitty ',\n    say: function  (sound, message ) {\n        console.log(`${this .name} ${sound } ${message }`);\n    }\n};const dog = {\n  name: 'Husky '\n};cat.say('meows', 'hello! ');              // Kitty meows hello!\ncat.say.apply(dog, ['barks', 'apply! ']); // Husky barks apply!\ncat.say.call(dog, 'barks ', 'call! ');     // Husky barks call!\nconst dogFn = cat.say.bind(dog);\ndogFn('barks', 'bind! ');                 // Husky barks bind!"}, {"page_number": 44, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nDo czego s\u0142u\u017cy \nuse strict?\n23"}, {"page_number": 45, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDyrektywa use strict pozwala wymusi\u0107 \u015bci\u015blejsz\u0105 analiz\u0119  \ni obs\u0142ug\u0119 b\u0142\u0119d\u00f3w przez silnik JavaScript w trakcie uruchomie-nia aplikacji. Sprawia to, \u017ce parser jest du\u017co bardziej rygory-styczny i zg\u0142osi b\u0142\u0119dy, kt\u00f3re bez tej dyrektywy s\u0105 ignorowane.\nJest to zalecana praktyka w pracy z kodem JavaScript\n\u2022 u\u0142atwia debugowanie\n\u2022 zapobiega przypadkowemu tworzeniu zmiennych  \n      w global scope \n\u2022 wy\u0142apuje powt\u00f3rzone parametry w deklaracji funkcji\n\u2022 zg\u0142asza b\u0142\u0105d przy niepoprawnym u\u017cyciu delete\n\u2022 zapobiega utworzeniu niepoprawnych zmiennych,  \n      np. ze s\u0142owek kluczowym let private = 1  "}, {"page_number": 46, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nObject.freeze() vs \nObject.seal?\n24"}, {"page_number": 47, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObiekt, na kt\u00f3rym wywo\u0142ano funkcj\u0119 freeze() staje si\u0119 im -\nmutable i nie mo\u017cna zmienia\u0107 jego w\u0142a\u015bciwo\u015bci.\n \nNatomiast je\u017celi na obiekcie wywo\u0142ano funkcj\u0119 seal(), mo\u017cna \nzmienia\u0107 jego istniej\u0105ce w\u0142a\u015bciwo\u015bci ale nie mo\u017cna dodawa\u0107 nowych, ani usuwa\u0107 istniej\u0105cych.tconst scores = { react : 89, vue : 95, angular : 91 };\nObject.freeze(scores);\nscores['react'] = 100 ;       //\u00a0nie\u00a0dzia\u0142a\nObject.isFrozen (scores);     // true\nconsole.log(scores);         // {react: 89, vue: 95, angular: 91}\ntconst scores = { react : 89, vue : 95, angular : 91 };\nObject.seal(scores);\ndelete scores.react;        //\u00a0nie\u00a0dzia\u0142a\nscores['react'] = 100        //\u00a0dzia\u0142a!\nscores['svelte '] = 88;      //\u00a0nie\u00a0dzia\u0142a\nObject.isSealed (scores);    // true\nconsole.log(scores);        // {react: 100, vue: 95, angular: 91}"}, {"page_number": 48, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym jest \nevent loop?\n25"}, {"page_number": 49, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent loop jest to mechanizm kt\u00f3ry wykonuje zadania ze \nstosu wywo\u0142a\u0144 (call stack), kolejki zada\u0144 (task queue) oraz kolejki renderowania (render queue).\nKa\u017cde u\u017cycie funkcji powoduje umieszczenie jej na stosie \nwywo\u0142a\u0144. Utworzenie callback dla funkcji asynchronicznej, powoduje dodanie go do task queue. Natomiast w render queue umieszczane s\u0105 wszystkie operacje, kt\u00f3re zmieniaj\u0105 wygl\u0105d strony. \nProces dzia\u0142ania Event loop mo\u017cna sprowadzi\u0107 do cykliczne-\ngo wywo\u0142ywania:\n1. Wykonaj wszystkie zadania ze stosu wywo\u0142a\u0144.\n2. Wykonaj wszystkie operacje z render queue, kt\u00f3re zmieniaj\u0105 co\u015b na  \n        stronie (zmiana stylu, przeliczenie wysoko\u015bci, zmiana DOM).\n3. Sprawd\u017a, czy jest co\u015b w task queue. Je\u017celi jest, sprawd\u017a, czy call stack  \n        jest pusty. Je\u017celi call stack jest pusty, we\u017a jedno zadanie z task queue  \n        i przenie\u015b je na call stack."}, {"page_number": 50, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym s\u0105 Persistent \nData Structures?\n26"}, {"page_number": 51, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPersistent Data Structures, czyli Trwa\u0142e struktury danych \ns\u0105 to struktury, kt\u00f3re zawsze zachowuje swoje poprzednie wersje, kiedy s\u0105 modyfikowane. W efekcie s\u0105 niezmienne - immutable, poniewa\u017c operacje na nich nie powoduj\u0105 zmiany struktury, lecz powstanie nowej, uaktualnionej wersji. \nW \u015bwiecie JavaScript Persistent Data Structures naj\u0142atwiej \ntworzy\u0107 korzystaj\u0105c z biblioteki immutable.js, kt\u00f3ra nie tylko wspomaga tworzenie i korzystanie z niemodyfikowalnych obiekt\u00f3w, ale r\u00f3wnie\u017c zapewnia memoizacj\u0119, wygodne API oraz wysok\u0105 wydajno\u015b\u0107 przez wsp\u00f3\u0142dzielenie danych.\ntimport { Map } from 'immutable ';\nconst post = Map({ title : 'Angular Exam ' });\nconst updatedPost  = post.set({ title : 'React Exam! ' });\nconsole.log(post.get('title'));              // Angular Exam\nconsole.log(updatedPost .get('title'));       // React Exam"}, {"page_number": 52, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJak stworzy\u0107  \nnamespace?\n27"}, {"page_number": 53, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNamespace, czyli przestrze\u0144 nazw mo\u017cna w JavaScript \nzasymulowa\u0107 przyk\u0142adowo korzystaj\u0105c z IIFE (Immediately Invoked Function Expression) \nlub z object literal, czyli inicjalizatora obiektu.\n tvar message = (function  () {\n    var tempMsg = 'hello ';\n    return tempMsg;\n})();\nconsole.log(message)  // 'hello'\ntvar message = {};\nmessage.tempMsg = 'hello ';\nmessage. print = function () {\n    console.log(message.tempMsg);\n}message. print();      // 'hello'"}, {"page_number": 54, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJak debugowa\u0107 kod \nJavaScript?\n28"}, {"page_number": 55, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajpopularniejsze sposoby debugowania kodu JavaScript to:\n\u2022 Chrome Devtools: zak\u0142adka Source  + breakpoints\n\u2022 Wyra\u017cenia debugger\n\u2022 Dodawanie w kodzie\n console.log    - do sprawdzania zawarto\u015bci zmiennych\n console.time   - do mierzenia czasu wykonania kodu\n console.table  - do sprawdzania zawarto\u015bci tablic\n\u2022 Debugger wbudowany w IDE, np. WebStorm\n\u2022 Do debugowania request\u00f3w HTTP \u2013 Postman\n\u2022 Do kontrolowania zmian w HTML \u2013 inspektor  \n            wbudowany w przegl\u0105dark\u0119"}, {"page_number": 56, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJak zabezpieczy\u0107 \nobiekt przed  rozszerzaniem?\n29"}, {"page_number": 57, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby zabezpieczy\u0107 obiekt przed rozszerzaniem mo\u017cna \nskorzysta\u0107 z funkcji:\nObject.preventExtensions()  - sprawi, \u017ce nie b\u0119dzie  \nmo\u017cliwe dodanie nowych w\u0142a\u015bciwo\u015bci do obiektu; mo\u017cli-we b\u0119dzie za to zmiana lub usuni\u0119cie istniej\u0105cych\nObject.seal()  - sprawi, \u017ce mo\u017cliwa b\u0119dzie jedynie \nzmiana ju\u017c istniej\u0105cych w\u0142a\u015bciwo\u015bci; dodanie nowych lub \nusuni\u0119cie istniej\u0105cych nie powiedzie si\u0119\nObject.freeze()  - sprawi, \u017ce nie b\u0119dzie mo\u017cliwa \u017cadna \nzmiana istniej\u0105cych w\u0142a\u015bciwo\u015bci; dodanie nowych lub \nusuni\u0119cie r\u00f3wnie\u017c si\u0119 nie powiedzie."}, {"page_number": 58, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo r\u00f3\u017cni funkcje \nsynchroniczne od asynchronicznych?\n30"}, {"page_number": 59, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcje synchroniczne s\u0105 wykonywane w momencie ich \nuruchomienia. Interpreter czeka na ich sko\u0144czenie zanim uruchomi kolejne linie kodu. Funkcje synchroniczne blokuj\u0105 renderowanie UI a\u017c do ich sko\u0144czenia.\nFunkcje asynchroniczne s\u0105 r\u00f3wnie\u017c wykonywane w momen-\ncie ich uruchomienia, ale interpreter nie czeka na jej wyko-nanie, tylko zostaje uruchomiona kolejna linia kodu. Funkcje asynchroniczne zazwyczaj s\u0105 funkcjami korzystaj\u0105cymi z operacji I/O, np. \u017c\u0105dania HTTP, odczyt plik\u00f3w, obs\u0142uga UI.  W JavaScript jest wiele mo\u017cliwo\u015bci obs\u0142ugi funkcji asynchron-icznych, np.\n\u2022 Callbacks\n\u2022 Promises\n\u2022 Async/await"}, {"page_number": 60, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nJak dzia\u0142aj\u0105 funkcje \nmap, filter i reduce?\n31"}, {"page_number": 61, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMetoda map tworzy now\u0105 tablic\u0119 z rezultatem wykonania \nwskazanej funkcji na ka\u017cdym elemencie podanej tablicy:\ntconst numbers  = [1, 2, 3, 4, 5];\nconst squared  = numbers .map(number => Math .pow(number, 2));\nconsole.log(squared ); // [1, 4, 9, 16, 25]\ntconst odds = numbers .filter(number => number  % 2 !==  0);\nconsole.log(odds);   // [1, 3, 5]Metoda filter tworzy now\u0105 tablic\u0119 z wszystkimi elementami, kt\u00f3re spe\u0142niaj\u0105 warunek okre\u015blony w predykacie:\nMetoda reduce ma na celu redukcj\u0119 ca\u0142ej tablicy do poje-\ndynczej warto\u015bci. Odbywa si\u0119 to przez wywo\u0142anie funkcji i przekazanie jej zakumulowanego rezultatu z poprzednich wywo\u0142a\u0144 i kolejnego elementu tablicy (od lewej do prawej).\ntconst sum = numbers .reduce((total, current ) => total +current , 0);\nconsole.log(sum); // kroki: 0+1=1; 1+2=3; 3+3=6; 6+4=10; 10+5=15"}, {"page_number": 62, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy forEach()  a map()?\n32"}, {"page_number": 63, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMetoda forEach wykonuje przekazan\u0105 funkcj\u0119 jeden raz na \nka\u017cdy element tablicy. \ntconst numbers  = [1, 2, 3, 4, 5];\nnumbers.forEach (number => {\n    const squared  = Math.pow(number, 2);\n    console.log(`${number }^2 = ${squared }`);\n});\nMetoda map tworzy now\u0105 tablic\u0119 z rezultatem wykonania wskazanej funkcji na ka\u017cdym elemencie podanej tablicy\ntconst numbers  = [1, 2, 3, 4, 5];\nconst squared  = numbers .map(\n   number => Math .pow(number, 2)\n);\nconsole.log(squared ); // [1, 4, 9, 16, 25]"}, {"page_number": 64, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nCzym s\u0105 first class \nfunctions?\n33"}, {"page_number": 65, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcje pierwszej klasy - first class functions - posiada j\u0119zyk \nprogramowania, w kt\u00f3rym s\u0105 one traktowane jak ka\u017cda inna zmienna. \nW \u015bwiecie JavaScript wszystkie funkcje s\u0105 funkcjami pier -\nwszej klasy, poniewa\u017c mo\u017cna je \n\u2022 przekazywa\u0107 jako argumenty wywo\u0142ania innych funkcji, \n\u2022 zwraca\u0107 jako rezultat dzia\u0142ania funkcji\n\u2022 przypisywa\u0107 do zmiennych zupe\u0142nie jak ka\u017cd\u0105 inn\u0105  \n      warto\u015b\u0107\nW przyk\u0142adzie poni\u017cej isEven jest funkcj\u0105, kt\u00f3r\u0105 mo\u017cemy \nprzekaza\u0107 jako parametr metody filter:\ntconst numbers  = [1, 2, 3, 4, 5];\nconst isEven = number  => number  % 2 ===  0;\nnumbers.filter(isEven);   // [2, 4] "}, {"page_number": 66, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nCzym s\u0105 funkcje \nwy\u017cszego rz\u0119du?\n34"}, {"page_number": 67, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcje wy\u017cszego rz\u0119du - higher order functions - to funkc -\nje, kt\u00f3re operuj\u0105 na innych funkcjach. Przyk\u0142adowo:\n\u2022 przyjmuj\u0105 funkcj\u0119 jako argument wywo\u0142ania, lub\n\u2022 zwracaj\u0105 funkcje jako wynik swojego dzia\u0142ania\nPrzyk\u0142adami cz\u0119sto u\u017cywanych funkcji wy\u017cszego rz\u0119du s\u0105: \nmap, filter i reduce. \nW przyk\u0142adzie poni\u017cej greaterThan jest funkcj\u0105 wy\u017cszego \nrz\u0119du, kt\u00f3ra przyjmuje limit a zwraca inn\u0105 funkcj\u0119, sprawdza-j\u0105c\u0105 czy przekazana liczba jest wi\u0119ksza od limitu:\ntconst greaterThan  = limit  => \n number => number  > limit ;\nconst greaterThan10  = greaterThan (10);\nconsole.log(greaterThan10 (20));  // true"}, {"page_number": 68, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nCo to jest  \npure function?\n35"}, {"page_number": 69, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPure function to funkcja, kt\u00f3ra ma poni\u017csze cechy:\n\u2022 jest deterministyczna - dla tych samych parametr\u00f3w  \n      wej\u015bciowych zawsze zwraca ten sam wynik,\n\u2022 wynik zale\u017cy tylko od parametr\u00f3w wywo\u0142ania\n\u2022 nie modyfikuje zewn\u0119trznych warto\u015bci ani zmiennych  \n      poza swoim zakresem \u2022 nie ma efekt\u00f3w ubocznych - side effects - takich jak  \n      manipulacja DOM, zapytania HTTP, operacje I/O\nPrzyk\u0142adowo funkcja push() dodaj\u0105ca element do tablicy  \nnie jest pure function, poniewa\u017c modyfikuje tablic\u0119 i kolejne wywo\u0142ania daj\u0105 inne rezultaty.\nZ kolei funkcja concat() \u0142\u0105cz\u0105ca tablice w jedn\u0105, jest pure \nfunction, poniewa\u017c nie modyfikuje istniej\u0105cych tablic tylko tworzy now\u0105 zawieraj\u0105c\u0105 po\u0142\u0105czone tablice."}, {"page_number": 70, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nCzym jest  \nevent bubbling?\n36"}, {"page_number": 71, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent bubbling jest typem propagacji zdarze\u0144, gdzie zdarze-\nnia obs\u0142ugiwane s\u0105 w pierwszej kolejno\u015bci przez element najbardziej wewn\u0119trzny, a dalej przez kolejne parent ele-menty w hierarchii a\u017c do najbardziej zewn\u0119trznego elementu drzewa DOM.\nMetoda addEventListener pozwala zarejestrowa\u0107 listenera \nzdarze\u0144 okre\u015blonego typu. Trzecim parametrem tej funkcji jest useCapture, kt\u00f3re kontroluje czy korzystamy z event bubbling (domy\u015blne) czy event capturing.\nEvent bubbling mo\u017cemy przerwa\u0107 poprzez funkcj\u0119  \nevent.stopPropagation().\ntelement. addEventListener ('click', handle , false);\n//\u00a0useCapture\u00a0=\u00a0false,\u00a0obs\u0142uga\u00a0 bubbling"}, {"page_number": 72, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nCzym jest  \nevent capturing?\n37"}, {"page_number": 73, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent capturing jest typem propagacji zdarze\u0144, gdzie \nzdarzenia obs\u0142ugiwane s\u0105 w pierwszej kolejno\u015bci przez element najbardziej zewn\u0119trzny, a dalej przez kolejne child elementy w hierarchii a\u017c do najbardziej wewn\u0119trznego elementu DOM.\nMetoda addEventListener pozwala zarejestrowa\u0107 listenera \nzdarze\u0144 okre\u015blonego typu. \nTrzecim parametrem tej funkcji jest useCapture, kt\u00f3re \nkontroluje czy korzystamy z event bubbling (domy\u015blne) czy event capturing.\ntelement. addEventListener ('click', handler , true);\n//\u00a0useCapture\u00a0=\u00a0true,\u00a0obs\u0142uga\u00a0 capturing"}, {"page_number": 74, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nNa czym polega \ndelegacja zdarze\u0144?\n38"}, {"page_number": 75, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent bubbling oraz event capturing pozwalaj\u0105 na imple-\nmentacj\u0119 wa\u017cnego wzorca obs\u0142ugi zdarze\u0144 zwanego delegac -\nj\u0105 zdarze\u0144 - event delegation.\nJe\u017celi mamy wiele element\u00f3w drzewa DOM obs\u0142ugiwanych \nw ten sam spos\u00f3b, to zamiast tworzy\u0107 handler dla ka\u017cdego z tych element\u00f3w, tworzymy jeden handler, do kt\u00f3rego b\u0119dzie-my delegowa\u0107 obs\u0142ug\u0119 zdarze\u0144 wszystkich element\u00f3w. \nPrzyk\u0142adowo, zdarzenie click na elemencie <li> delegujemy do handlera umieszczonego na <ul>. Informacja, o tym kt\u00f3ry element <li> zosta\u0142 klikni\u0119ty uzyskujemy przez event.target.\ntconst form = document .querySelector ('#signin ');\nform.addEventListener ('input', function  (event) {\n    console.log(event.target);\n}, false);"}, {"page_number": 76, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nDo czego s\u0142u\u017cy \nobiekt history?\n39"}, {"page_number": 77, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObiekt window.history zawiera histori\u0119 przegl\u0105danych \nstron. Jest u\u017cywany do prze\u0142\u0105czania si\u0119 wstecz lub dalej pomi\u0119dzy stronami odwiedzanymi przez u\u017cytkownika. Ob-kekt posiada kilka przydatnych metod:\n\u2022  history.back()      - przej\u015bcie wstecz\n\u2022  history.forward()   - przej\u015bcie dalej\n\u2022  history.go(number)  - przej\u015bcie dalej o zadan\u0105  \n      liczb\u0119 stron lub wstecz (je\u015bli liczba ujemna)\n\u2022  history.pushState   - przydatne, gdy chcemy  \n      zmieni\u0107 URL bez prze\u0142adowania strony\n\u2022  history.replaceState  - zmienia ostatni wpis"}, {"page_number": 78, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy attribute  a property?\n40"}, {"page_number": 79, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAttributes s\u0105 zdefiniowane na poziomie HTML a properties \nna poziomie drzewa DOM. U\u017cywamy properties w kodzie JavaScript, aby modifikowa\u0107 warto\u015bci atrybut\u00f3w HTML. \nPrzyk\u0142adowo, <input> posiada atrybut value typu string, \nkt\u00f3rego warto\u015b\u0107 wynosi 0:\nKorzystaj\u0105c z JavaScript mo\u017cemy odczyta\u0107 warto\u015b\u0107 property:\n t<input type=\"text\" value=\"0\">\ntconst input = document .querySelector ('input');\nconsole.log(input.value);     // '0'\ntinput.setAttribute ('value', 9);Modyfikuj\u0105c warto\u015b\u0107 property po stronie JavaScript, warto\u015b\u0107 \nattribute w HTML nie ulegnie zmianie. Aby zmodyfikowa\u0107 warto\u015b\u0107 po stronie HTML, nale\u017cy u\u017cy\u0107:"}, {"page_number": 80, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSTORAGE\nCzym jest  \nweb storage?\n41"}, {"page_number": 81, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWeb storage to API zapewniaj\u0105ce mechanizmy, dzi\u0119ki \nkt\u00f3rym przegl\u0105darki mog\u0105 zapisywa\u0107 i odczytywa\u0107 rekordy w postaci par klucz-warto\u015b\u0107 w spos\u00f3b znacznie bardziej przy-jazdy ni\u017c w przypadku obs\u0142ugi plik\u00f3w cookies. \nWeb storage zapewnia dwa podstawowe mechanizmy \nprzechowywania danych:\nSession storage  - przechowuje dane w czasie trwania \nsesji - dane zostan\u0105 skasowane, je\u015bli przegl\u0105darka zosta-nie zamkni\u0119ta\nLocal storage  - przechowuje dane r\u00f3wnie\u017c po zam-\nkni\u0119ciu przegl\u0105darki - dane nie zostan\u0105 skasowane au-\ntomatycznie, ale b\u0119d\u0105 przechowywane do czasu usuni\u0119cia przez u\u017cytkownika, b\u0105d\u017a za pomoc\u0105 JavaScript"}, {"page_number": 82, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSTORAGE\nJak skorzysta\u0107 \nz web storage?\n42"}, {"page_number": 83, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWeb storage jest dost\u0119pny za pomoc\u0105 obiektu window, \npoprzez properties localStorage oraz sessionStorage, kt\u00f3re udost\u0119pniaj\u0105 obiekty WindowLocalStorage oraz Window -\nSessionStorage.\nZa pomoc\u0105 tych obiekt\u00f3w mo\u017cna tworzy\u0107, odczytywa\u0107, \nzapisywa\u0107 i usuwa\u0107 dane w pami\u0119ci przegl\u0105darki, przyk\u0142ad-owo:\ntconst courses  = ['React ', 'Vue', 'Angular '];\nlocalStorage .setItem ('courses ', courses );\nconst saved = localStorage .getItem ('courses ');    \nconsole.log(saved); //['React', 'Vue', 'Angular']\nlocalStorage .removeItem ('courses ');\nlocalStorage .clear();"}, {"page_number": 84, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSTORAGE\nCzy mo\u017cna odczyta\u0107 \nlocalStorage innej domeny?\n43"}, {"page_number": 85, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNie ma mo\u017cliwo\u015bci odczytania danych zapisanych  \nw localStorage albo sessionStorage przez inn\u0105 domen\u0119. \nPrzed dost\u0119pem do danych zapisanych przez inn\u0105 domen\u0119 \nchroni nas mechanizm Same Origin Policy. \nAby uzyska\u0107 dost\u0119p do danych z web storage musz\u0105 si\u0119 \nzagadza\u0107: protok\u00f3\u0142, host i port.\nPrzyk\u0142adowo do danych zapisanych przez \nhttps://store.company.com/page.html\nmo\u017cna uzyska\u0107 dost\u0119p z (inna \u015bcie\u017cka) \nhttps://store.company.com/checkout/page.html\nnatomiast nie mo\u017cna z (inny protok\u00f3\u0142) \nhttp://store.company.com/page.html"}, {"page_number": 86, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSTORAGE\nCo r\u00f3\u017cni cookies, \nsessionStorage  i localStorage?\n44"}, {"page_number": 87, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCookies localStorage sessionStorage\nObs\u0142ugiwane po \nstronie klienta  i serweraObs\u0142ugiwane tylko po stronie klientaObs\u0142ugiwane tylko po stronie klienta\nCzas \u017cycia  \nkonfigurowany \nprzez parametr \nExpiresDane czyszczone \nr\u0119cznie lub  \nz poziomu  \nJavaScriptDane czyszczone \npo zamkni\u0119ciu \nprzegl\u0105darki  \n(lub zak\u0142adki)\nMaksymalny rozmiar 4KBMaksymalny rozmiar do 10MBMaksymalny rozmiar do 10MB"}, {"page_number": 88, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSTORAGE\nJakie metody s\u0105 \ndost\u0119pne w  sessionStorage?\n45"}, {"page_number": 89, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plsessionStorage udost\u0119pnia nast\u0119puj\u0105ce metody \n setItem(key, value)  - zapisuje now\u0105 warto\u015b\u0107  \n                                                          lub aktualiz uje istniej\u0105c\u0105\n getItem(key)         - odczytuje warto\u015b\u0107\n removeItem(key)      - usuwa klucz i warto\u015b\u0107\n clear()              - czy\u015bci wszystkie klucze \ntconst courses  = ['React ', 'Vue', 'Angular '];\nsessionStorage .setItem ('courses ', courses );\nconst saved = localStorage .getItem ('courses ');    \nconsole.log(saved); //['React', 'Vue', 'Angular']\nlocalStorage .removeItem ('courses ');\nlocalStorage .clear();"}, {"page_number": 90, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nCo to jest \nPromise?\n46"}, {"page_number": 91, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPromise to obiekt reprezentuj\u0105cy wynik dzia\u0142ania oper -\nacji asynchronicznej. Mo\u017ce wyst\u0119powa\u0107 w trzech r\u00f3\u017cnych \nstanach: fulfilled (zako\u0144czone), rejected (odrzucone) albo pending (w trakcie).\nZadanie asynchroniczne mo\u017ce zako\u0144czy\u0107 si\u0119:\n\u2022 powodzeniem \u2013 wtedy wywo\u0142ywana jest metoda  \n      resolve()\u2022 pora\u017ck\u0105 \u2013 wtedy wywo\u0142ywana jest reject()\ntfunction  asyncOperation () {\n    return new Promise ((resolve , reject ) => {\n        // zadanie asynchroniczne...\n        resolve(/* result */ );\n    });\n}"}, {"page_number": 92, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nCo to jest  \ncallback?\n47"}, {"page_number": 93, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCallback jest funkcj\u0105, kt\u00f3r\u0105 przekazano jako argument do \ninnej funkcji i kt\u00f3ra zostanie wywo\u0142ana z jej wn\u0119trza, aby zasygnalizowa\u0107 uko\u0144czenie jakiego\u015b dzia\u0142ania, na przyk\u0142ad nadej\u015bcie odpowiedzi z REST API za pomoc\u0105 fetch().\nCallback jest wykorzystywany, aby umo\u017cliwi\u0107 przetwarzanie \nwynik\u00f3w dzia\u0142ania operacji asynchronicznej:\ntfunction  greetingsCallback (name) {\n  console .log('Hello ' + name );\n}\nfunction  emptyNameCallback () {\n  console .error('Cannot process empty value! ');\n}function  processUserName (callback , errorCallback ) {\n  var name = prompt ('Please enter your name. ');\n  if(!name) errorCallback ();\n  else callback (name);\n}\nprocessUserName (greetingsCallback , emptyNameCallback );"}, {"page_number": 94, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nCzym  jest  \ncallback hell?\n48"}, {"page_number": 95, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCallback hell jest jednym z cz\u0119\u015bciej wyst\u0119puj\u0105cych antyw-\nzorc\u00f3w. Wyst\u0119puje w kodzie, w kt\u00f3rym przeplata si\u0119 wiele zagnie\u017cd\u017conych callback\u00f3w co czyni kod trudnym do czytania, utrzymywania i podatnym na b\u0142\u0119dy. \nPojawia si\u0119, gdy w kodzie wykonywanych jest wiele operacji \nasynchronicznych, kt\u00f3re musz\u0105 nast\u0105pi\u0107 kolejno po sobie:\ntfunction  findUserMessages (username , callback ) {\n  fetchUserData (username , user => {\n    fetchUserMessages (user.userId, messages  => {\n      messages .forEach (message  => {\n        getContent (message .uuid, content => {\n          callback (content );\n        })\n      });    })})}"}, {"page_number": 96, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nJakie s\u0105 korzy\u015bci  \nw korzystaniu z Promise?\n49"}, {"page_number": 97, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDzi\u0119ki korzystaniu z Promise kod jest czytelniejszy i \u0142atwie-\njszy do utrzymania poprzez:\n\u2022 Pozbycie si\u0119 callback hell \n\u2022 \u0141\u0105czenie kolejnych wywo\u0142a\u0144 funkcji asynchronicznych  \n      za pomoc\u0105 metody .then()\n\u2022 \u0141\u0105czenie r\u00f3wnoleg\u0142ych wywo\u0142a\u0144 funkcji  \n      asynchronicznych za pomoc\u0105 metody Promise.all()\n\u2022 \u0141atwiejsz\u0105 obs\u0142uga wyj\u0105tk\u00f3w i niepoprawnych  \n      odpowiedzi w .catch()\nKod uzyskany dzi\u0119ki zastosowaniu Promise b\u0119dzie prostszy \nni\u017c w przypadku callback. \nW niekt\u00f3rych sytuacjach mo\u017ce si\u0119 okaza\u0107 konieczne stoso-\nwanie polyfill podczas pracy z legacy kodem."}, {"page_number": 98, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nCo to jest \nasync/await?\n50"}, {"page_number": 99, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAsync/await to prostszy spos\u00f3b zapisu i obs\u0142ugi funkcji asyn-\nchronicznych, zbudowany w oparciu o Promise. \nS\u0142owo kluczowe async przed deklaracj\u0105 funkcji sprawia, \u017ce \nb\u0119dzie domy\u015blnie zwraca\u0142a Promise. \nS\u0142owo kluczowe await  mo\u017ce wyst\u0105pi\u0107 tylko w ramach funkcji \nasync, w przeciwnym razie zostanie zwr\u00f3cony wyj\u0105tek. await  sparawia \u017ce operacja asynchroniczna po prawej stronie \nwyra\u017cenia (najcz\u0119\u015bciej Promise) musi si\u0119 zako\u0144czy\u0107 zanim \nprzetworzona zostanie dalsza cz\u0119\u015b\u0107 funkcji.\ntasync function  findUserMessages (username ) {\n    const user = await  findUserData (username );\n    const messages  = await  findMessages (user.id);\n    return messages ;\n}"}, {"page_number": 100, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak mo\u017cna stworzy\u0107 \ntablic\u0119?\n51"}, {"page_number": 101, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plStandardowo now\u0105 tablic\u0119 mo\u017cemy w JavsScript utworzy\u0107 na \nco najmniej 5 r\u00f3\u017cnych sposob\u00f3w:\n// spos\u00f3b podstawowy\nconst courses  = ['React ', 'Angular ', 'Vue']; \n//\u00a0za\u00a0pomoc\u0105\u00a0new\u00a0-\u00a0tworzy\u00a0Array\u00a0o\u00a0danej\u00a0d\u0142ugo\u015bci\u00a0const names = new Array(5); \n//\u00a0za\u00a0pomoc\u0105\u00a0Array.ofconst animals  = Array .of('Tiger ', 'Shark '); \n//\u00a0na\u00a0bazie\u00a0innej\u00a0tablicy\u00a0za\u00a0pomoc\u0105\u00a0Array.fromconst wildAnimals  = Array .from(animals ); \n//\u00a0za\u00a0pomoc\u0105\u00a0operatora\u00a0spreadconst jsCourses  = [...courses]; "}, {"page_number": 102, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak sklonowa\u0107 \nobiekt w JavaScript?\n52"}, {"page_number": 103, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajprostszym sposobem na sklonowanie obiektu jest zasto-\nsowanie Object.assign. Ten spos\u00f3b jednak wykonuje shallow \ncopy , czyli nie kopiuje referencji do innych obiekt\u00f3w. Obiekty \nangular i cloned odwo\u0142uj\u0105 si\u0119 do tego samego obiektu react// spos\u00f3b podstawowy\nconst reactCourse  = { title : 'React ' };\nconst cloned = Object .assign({}, reactCourse );\nAby wykona\u0107 deep copy, mo\u017cna skorzysta\u0107 z lodash:const react = { title : 'React ' };\nconst angular  = { title : 'Angular ', next: react };\nconst cloned = Object .assign({}, angular);\nreact.title = 'Vue';\nconsole.log(cloned.title) // 'Vue'\nconst cloned = _.cloneDeep (angular);"}, {"page_number": 104, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCzym jest JSON i \njak go obs\u0142ugiwa\u0107?\n53"}, {"page_number": 105, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJSON, czyli JavaScript Object Notation jest formatem tek -\nstowym bazuj\u0105cym na sk\u0142adni JavaScript. Jest przydatny do \nprzesy\u0142ania danych przez sie\u0107 oraz zapisywania ich do baz danych lub plik\u00f3w. \nW JavaScript obiekt JSON posiada dwie metody: \nJSON.stringify()  - zamienia obiekt na string \nJSON.parse()     - zamienia string na obiekt i rzuca  \n                                             SyntaxError w przypadku b\u0142\u0119d\u00f3 w\nconst react = { title : 'React ' };\nconst data = JSON.stringify (react);\nconsole.log(data);      // \"{\"title\":\"React\"}\"\nconst retrieved  = JSON.parse(data);\nconsole.log(retrieved ); // { title : \"React\" }"}, {"page_number": 106, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak odczyta\u0107 dane \nzapisane w JSON?\n54"}, {"page_number": 107, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby odczyta\u0107 dane zapisane w JSON, nale\u017cy u\u017cy\u0107 metody \nJSON.parse(). Je\u017celi dane nie s\u0105 poprawnym JSON-em, meto-da rzuci wyj\u0105tek SyntaxError. \nJSON.parse() jest szczeg\u00f3lnie przydatna podczas odczyty-\nwania danych otrzymanych w wyniku zapytania HTTP. Dane z serwera przychodz\u0105 zawsze jako string. tconst userData  = '{\"name\": \"Bob\", \"age\": 26} ';\nconst user = JSON.parse(userData );\nconsole.log(user.name); // \"Bob\""}, {"page_number": 108, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJaki jest efekt  \nu\u017cycia setTimeout  z warto\u015bci\u0105 0?\n55"}, {"page_number": 109, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plKiedy funkcja setTimeout() zostanie wywo\u0142ana z drugim \nparametrem ustawionym jako 0, silnik JavaScript wykona wskazan\u0105 funkcj\u0119 tak szybko jak to tylko mo\u017cliwe, cho\u0107 nie od razu. Wywo\u0142anie funkcji zostanie umieszczone w kolejce zdarze\u0144 eventQueue i zostanie wykonane w kolejnym cyklu. \nPrzyk\u0142adowo,  wyra\u017cenia (1) oraz (4) zostan\u0105 wykonane od \nrazu w kolejno\u015bci utworzenia, natomiast (2) oraz (3) zostan\u0105 umieszczone w kolejce zdarze\u0144. Kiedy silnik JavaScript zako\u0144czy przetwarzanie, pobierze nast\u0119pne zadanie z kolejki (3) i je obs\u0142u\u017cy. \ntconsole.log(1);\nsetTimeout (() => console .log(2), 1000);\nsetTimeout (() => console .log(3), 0);\nconsole.log(4);\n// 1, 4, 3 ... po sekundzie ..., 2"}, {"page_number": 110, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nPo co stosujemy \nObject.seal()?\n56"}, {"page_number": 111, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZastosowanie Object.seal() sprawia, \u017ce do obiektu nie mo\u017c-\nna doda\u0107 \u017cadnych nowych w\u0142a\u015bciwo\u015bci. Nie mo\u017cna r\u00f3wnie\u017c \nusun\u0105\u0107 \u017cadnej z ju\u017c istniej\u0105cych.  Pr\u00f3ba wykonania takiej czyn-\nno\u015bci nie powiedzie si\u0119, chocia\u017c nie zostanie rzucony \u017caden wyjtek. \nMo\u017cna za to modyfikowa\u0107 istniej\u0105ce w\u0142a\u015bciwo\u015bci obiektu.\ntconst user = { name : 'Bob', age: 26 };\nObject.seal(user);\nObject.isSealed (user);// true\nuser.name = 'Alice ';  //\u00a0mo\u017cna\u00a0zmieni\u0107\u00a0property\nuser.city = 'London '; //\u00a0nie\u00a0mo\u017cna\u00a0doda\u0107\ndelete user.age;      //\u00a0nie\u00a0mo\u017cna\u00a0usun\u0105\u0107\nconsole.log(user);    // {name:\"Alice\",age:26}"}, {"page_number": 112, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nPo co stosujemy \nObject.freeze()?\n57"}, {"page_number": 113, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZastosowanie Object.freeze() sprawia, \u017ce obiekt staje si\u0119 \nimmutable i nie mo\u017cna zmienia\u0107 jego w\u0142a\u015bciwo\u015bci, dodawa\u0107 \nnowych, ani usuwa\u0107 istniej\u0105cych. W pr\u00f3wnaniu do Object.\nseal(), nie mo\u017cna zmienia\u0107 warto\u015bci properties. \nAby sprawdzi\u0107, czy obiekt jest zamro\u017cony mo\u017cna skorzysta\u0107 z \nfunkcji Object.isFrozen().\ntconst user = { name : 'Bob', age: 26 };\nObject.freeze(user);\nObject.isFrozen (user);// true\nuser.name = 'Alice ';  //\u00a0nie\u00a0mo\u017cna\u00a0zmieni\u0107\nuser.city = 'London '; //\u00a0nie\u00a0mo\u017cna\u00a0doda\u0107\ndelete user.age;      //\u00a0nie\u00a0mo\u017cna\u00a0usun\u0105\u0107\nconsole.log(user);    // {name:\"Alice\",age:26}"}, {"page_number": 114, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo r\u00f3\u017cni  \nObject.values od Object.entries?\n58"}, {"page_number": 115, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObie funkcje mo\u017cemy wykorzysta\u0107 do iterowania po w\u0142a\u015bci-\nwo\u015bciach obiektu w JavaScript:\nObject.values()  zwraca tablic\u0119 zawieraj\u0105c\u0105 \nwarto\u015bci wszystkich w\u0142a\u015bciwo\u015bci tekstowych \nobiektu.\nObject.entries()  zwraca tablic\u0119 zawieraj\u0105c\u0105 \npary klucz-warto\u015b\u0107  ka\u017cdej w\u0142a\u015bciwo\u015bci tek -\nstowej obiektu.\ntconst user = { name : 'Bob', age: 26 };\nObject.values(user);\n// [\"Bob\", 26]\nObject.entries (user);\n// [[\"name\", \"Bob\"], [\"age\", 26]]"}, {"page_number": 116, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy for...in  a for...of?\n59"}, {"page_number": 117, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObie konstrukcje mo\u017cemy wykorzysta\u0107 do iterowania po \nw\u0142a\u015bciwo\u015bciach obiektu w JavaScript:\n\u2022 for..in iteruje po wszystkich kluczach w\u0142a\u015bciwo\u015bci obiektu. W przypadku tablic, kluczem s\u0105 indeksy kole-jnych element\u00f3w tablicy.\n\u2022 for..of iteruje po warto\u015bciach obiektu, elementach tablicy, znakach w stringach.\ntconst courses  = ['Angular ', 'React ', 'Vue'];\ncourses.level = 'advanced ';\nfor(const key in courses ) {\n  console .log(key); // 0, 1, 2, level\n}\nfor(const val of courses ) {\n  console .log(val); // 'Angular', 'React', 'Vue'\n}"}, {"page_number": 118, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJak sprawdzi\u0107 czy \nobiekt posiada property?\n60"}, {"page_number": 119, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDo sprawdzenia, czy obiekt posiada property w postaci klucza, \nmo\u017cna skorzysta\u0107 z jednej z trzech metod:\n1. Zastosowanie operatora in\n2. Zastosowanie funkcji hasOwnProperty\n3. Por\u00f3wnanie z undefined\ntconst user = { name : 'Bob', age: 26 };\n\"city\" in user                 // false\n\"age\"  in user                 // true\nuser.hasOwnProperty (\"city\")   // false\nuser.hasOwnProperty (\"age\")    // true\nuser.city !== undefined         // false\nuser.age  !== undefined         // true"}, {"page_number": 120, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJakie s\u0105 korzy\u015bci  \nstosowania modu\u0142\u00f3w?\n61"}, {"page_number": 121, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDzi\u0119ki stosowaniu modu\u0142\u00f3w otrzymujemy kod, kt\u00f3ry:\n\u2022 jest \u0142atwiejszy w utrzymaniu\n\u2022 mo\u017cna u\u017cywa\u0107 wielokrotnie w r\u00f3\u017cnych kontekstach\n\u2022 zapewnia interfejs modu\u0142u ze \u015bwiatem zewn\u0119trznym\n\u2022 zapobiega wydostawaniu si\u0119 zmiennych do global scope\nt// scoring.js\nexport function  hasFailed (results , minScore =.9) {\n  return  results .some(score => score  < minScore );\n}\n// course.js\nimport { hasFailed } from './scoring.js '\nconst results  = [.79, .65, .89, .91];\nconsole.log(hasFailed (results ));         // true"}, {"page_number": 122, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym jest  \ncall stack?\n62"}, {"page_number": 123, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCall stack czyli stos wywo\u0142a\u0144 jest struktur\u0105 w silniku JavsS-\ncript, kt\u00f3ra przechowuje informacje o wywo\u0142aniach funkcji. Gdy funkcja jest wywo\u0142ywana, zostaje umieszczona na stosie i pozostaje tam a\u017c do zako\u0144czenia obs\u0142ugi.\nPrzyk\u0142adowo wywo\u0142uj\u0105c funkcj\u0119 calculateTotal() \n1. Umie\u015b\u0107 calculateTotal() na szczycie stosu i wykonaj\n2. Dodaj getTaxRate() na szczyt stosu i wykonaj \n3. Po zwr\u00f3ceniu podatku usu\u0144 getTaxRate() ze stosu\n4. Po obliczeniu wyniku usu\u0144 calculateTotal() ze stosu\ntfunction  calculateTotal (units, price) {\n    return getTaxRate () * units * price ;\n}\nfunction  getTaxRate () {\n    return 0.19;\n}"}, {"page_number": 124, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest  \nmemory heap?\n63"}, {"page_number": 125, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMemory heap to obszar pami\u0119ci, w kt\u00f3rym przechowywane \ns\u0105 obiekty gdy przypisujemy je do zmiennych. Innymi s\u0142owy jest to miejsce gdzie silnik JavaScript tworzy i usuwa obiekty, gdy nie s\u0105 ju\u017c potrzebne. \nAby sprawdzi\u0107 co aktualnie znajduje si\u0119 w heap mo\u017cna \nskorzysta\u0107 z Dev Tools i zak\u0142adki memory. \nMo\u017cna r\u00f3wnie\u017c skorzysta\u0107 z interfejsu Performance, kt\u00f3ry \nw Chrome udost\u0119nia m.in. obiekt memory informuj\u0105cy o aktualnie u\u017cywanej i dost\u0119pnej pami\u0119ci (w bajtach).\nt//\u00a0u\u017cyta\u00a0pami\u0119\u0107\u00a0na\u00a0bie\u017c\u0105cej\u00a0stronie\nperformance .memory.usedJSHeapSize \n//\u00a0pami\u0119\u0107\u00a0zaalokowana,\u00a0\" zarezerwowana \" dla strony\nperformance .memory.totalJSHeapSize\n//\u00a0maksimum\u00a0pami\u0119ci\u00a0jakie\u00a0mo\u017ce\u00a0by\u0107\u00a0dost\u0119pneperformance .memory.jsHeapSizeLimit"}, {"page_number": 126, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest  \npolyfill?\n64"}, {"page_number": 127, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPolyfill - szpachl\u00f3wka, wype\u0142niacz - to kod JavaScript, kt\u00f3ry \njest u\u017cywany aby udost\u0119pni\u0107 najnowsze mo\u017cliwo\u015bci j\u0119zyka starszym przezgl\u0105darkom, kt\u00f3re jeszcze ich nie wspieraj\u0105. \nPrzyk\u0142adowo, za pomoc\u0105 polyfilli mo\u017cna uruchami\u0107 kod \nnapisany w ES6 na starszych wersjach Internet Explorera.\nZ drugiej strony, dzi\u0119ki polyfillom mo\u017cna wykorzystywa\u0107 \nnajnowsze funkcje j\u0119zyka, kt\u00f3re nie wesz\u0142y jeszcze nawet do oficjalnej specyfikacji a s\u0105 jedynie propozycj\u0105. Dop\u00f3ki prze-gl\u0105darki nie b\u0119d\u0105 wspiera\u0107 tych funkcjonalno\u015bci, konieczne b\u0119dzie korzystanie z polyfilli. \nCz\u0119st\u0105 praktyk\u0105 jest korzystanie z biblioteki Babel czyli \ntranspilatora, kt\u00f3ry t\u0142umaczy kod JavaScript na starsze wers-je standardu j\u0119zyka JavaScript."}, {"page_number": 128, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nNa czym polega \ntree shaking?\n65"}, {"page_number": 129, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plTree shaking jest mechanizmem usuwania nieu\u017cywanego \nkodu. Oznacza, \u017ce podczas procesu budowania do powsta-j\u0105cej paczki kodu nie zostan\u0105 w\u0142\u0105czone modu\u0142y JavaScript, kt\u00f3re nie s\u0105 u\u017cywane. \nTree shaking zosta\u0142 rozpowszechniony razem z popularyzacj\u0105 \nES6 i jest oparty na wprowadzonym wtedy standardzie doty-cz\u0105cycm modu\u0142\u00f3w.\nMa ogromne znaczenie w zmniejszaniu rozmiaru aplikacji. \nIm mniejsza jest aplikacja, tym mniej danych trzeba przes\u0142a\u0107 do klienta i kr\u00f3tszy czas oczekiwania na jej za\u0142adowanie.\nPrzyk\u0142adowo prosta aplikacja Angular zajmuje kilka MB, \njednak dzi\u0119ki zastosowaniu tree shaking mo\u017cna jej rozmiar zmniejszy\u0107 do kilkuset kB."}, {"page_number": 130, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym jest \u0142a\u0144cuch \nprototyp\u00f3w?\n66"}, {"page_number": 131, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plKa\u017cdy obiekt posiada prywatn\u0105 w\u0142asno\u015b\u0107 \u0142\u0105cz\u0105c\u0105 go z innym \nobiektem zwanym jego prototypem. Obiekt prototypu posiada sw\u00f3j w\u0142asny prototyp, i tak dalej a\u017c obiekt osi\u0105gnie null jako sw\u00f3j prototyp. null nie ma prototypu i dzia\u0142a jak zako\u0144czenie \u0142a\u0144cucha prototyp\u00f3w.Przyk\u0142adowo, szukaj\u0105c dowolnej w\u0142a\u015bciwo\u015bci w obiekcie react, sprawdzony zostanie jego prototyp Course, nast\u0119pnie prototyp Object. Prototypem Object jest null. W tym miejs-cu \u0142a\u0144cuch si\u0119 ko\u0144czy.\ntfunction  Course(name) {\n    this.name = name;\n}\nconst react = new Course('react');\nreact.__proto__              // Course.prototype\nreact.__proto__.__proto__    // Object.prototype\nreact.__proto__.__proto__.__proto__ // null"}, {"page_number": 132, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy __proto__  a prototype?\n67"}, {"page_number": 133, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl__proto__ jest jednym z property (w\u0142a\u015bciwo\u015bci) obiektu, \nwskazuj\u0105cym na jego prototyp. Mo\u017cna za pomoc\u0105 niego przechodzi\u0107 w g\u00f3re po \u0142a\u0144cuchu prototyp\u00f3w. W tym celu mo\u017cna r\u00f3wnie\u017c skorzysta\u0107 z Object.getPrototypeOf(o). \nZ kolei prototype jest w\u0142a\u015bciwo\u015bci\u0105 obiektu funkcji, wska-\nzuj\u0105cym na prototyp jaki b\u0119d\u0105 mia\u0142y obiekty utworzone na bazie tej funkcji za pomoc\u0105 operatora new. \ntfunction  Course(name) {\n    this.name = name;\n}\nconst course = new Course('react');\ncourse.__proto__ === Course.prototype\ncourse.__proto__.__proto__ === Object.prototype\nCourse.__proto__ === Function .prototype\ncourse instanceof  Course\ncourse instanceof  Object"}, {"page_number": 134, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym s\u0105 klasy \nES6?\n68"}, {"page_number": 135, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plKlasy zosta\u0142y wprowadzone jako element JavaScript w ES6.  \nJednak jest to tylko lukier sk\u0142adniowy (syntactic sugar) dla istniej\u0105cego, opartego na prototypach modelu dziedzicze-nia. Sk\u0142adnia klas nie wprowadza nowego zorientowanego obiektowo modelu dziedziczenia. \nKlasy wprowadzaj\u0105 za to znacznie prostsz\u0105 i bardziej czyteln\u0105 \nsk\u0142adni\u0119 do tworzenia obiekt\u00f3w i dziedziczenia. \ntclass Course {\n    constructor (name) {\n        this.name = name;\n    }\n    getDetails () {\n        return 'I love ' + this .name; \n    }}"}, {"page_number": 136, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nNa czym polega \nobfuskacja?\n69"}, {"page_number": 137, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObfuskacja jest procesem tworzenia kodu JavaScript w taki \nspos\u00f3b, aby utrudni\u0107 jego odczytanie przez innych. Ma na celu:\n\u2022 Utrudnienie odczytania kodu - ogranicza reverse engi-neering, cho\u0107 go nie uniemo\u017cliwia\n\u2022 Ukrycie logiki biznesowej i sposobu dzia\u0142ania aplikacji\n\u2022 Zmniejszenie rozmiaru kodu \u017ar\u00f3d\u0142owego\n\u2022 Przyspieszenie pobierania aplikacji przez klient\u00f3w\nObfuskacja kodu nie oznacza jednak, \u017ce kod zostanie zaszy -\nfrowany , tzn. \u017ce nie da si\u0119 go odczyta\u0107 bez posiadania klucza.  \nDlatego nie nale\u017cy polega\u0107 na obfuskacji jako metodzie ukrycia najwa\u017cniejszych informacji, kluczy czy sekret\u00f3w. "}, {"page_number": 138, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nNa czym polega \nminifikacja?\n70"}, {"page_number": 139, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMinifikacja jest to proces kasowania z kodu (JavaScript, \nHTML, CSS lub innego) zb\u0119dnych znak\u00f3w, np. spacji, pustych linii, odst\u0119p\u00f3w czy komentarzy. Zachowuje si\u0119 przy tym poprawno\u015b\u0107 i dzia\u0142anie kodu. \nDodatkowo zamieniane s\u0105 tak\u017ce nazwy zmiennych na literki \nalfabetu tak, aby jeszcze bardziej ograniczy\u0107 wielko\u015b\u0107 ci\u0105gu. Ma to na celu:\n\u2022 Popraw\u0119 szybko\u015bci \u0142adowania stron i aplikacji\n\u2022 Ograniczenie transferu danych\n\u2022 Zmniejszenie rozmiaru kodu \u017ar\u00f3d\u0142owego\nPrzed minifikacj\u0105 kodu zalecane jest po\u0142\u0105czenie wszystkich plik\u00f3w w jeden i minifikacja ca\u0142o\u015bci."}, {"page_number": 140, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nNa czym polega \nmemoizacja?\n71"}, {"page_number": 141, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMemoizacja jest technik\u0105 poprawy wydajno\u015bci aplikacji \npoprzez zapisywanie w cache wynik\u00f3w dzia\u0142ania kosztownej funkcji. Przy ka\u017cdym wywo\u0142aniu funkcji z parametrami sprawdzany jest cache. Je\u015bli zapisany jest w nim wynik dla tych parametr\u00f3w, mo\u017cna go zwr\u00f3ci\u0107 bez obliczania na nowo.\ntfunction  memoize (func) {\n    const cache = {};\n    return value => {\n        if(cache [value]) {\n            return cache[value];\n        }\n        const result =  func (value);\n        cache[value] = result ;\n        return result;\n    }}const capitalize  = str => str.toUpperCase ();\nconst memoizedCap  = memoize (capitalize );\nconsole.log(memoizedCap ('aaa')); // Zapis do cache\nconsole.log(memoizedCap ('aaa')); // Odczyt z cache"}, {"page_number": 142, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nCzym jest \ncurrying?\n72"}, {"page_number": 143, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCurrying jest procesem polegaj\u0105cym na zmianie krotno\u015bci \nfunkcji. Innymi s\u0142owy, currying zmienia funkcj przyjmuj\u0105c\u0105 wiele parametr\u00f3w w sekwencj\u0119 funkcji, z kt\u00f3rych ka\u017cda przyjmuje tylko jeden parametr. \nDzi\u0119ki temu uzyskujemy funkcje, kt\u00f3ry s\u0105 czytelne, reu\u017cy-\nwalne i kt\u00f3re mo\u017cna sk\u0142ada\u0107 z innymi. Przyk\u0142adowo, funkcj\u0119 add5 mo\u017cna stosowa\u0107 wielkrotnie z r\u00f3\u017cnymi parametrami. \ntconst adder = (a, b) => a + b\nconst curriedAdder  = a => b => a + b\nconsole.log(adder(5, 7));      // 12\nconst add5 = curriedAdder (5);  // currying\nconsole.log(add5(7));          // 12 \nconsole.log(add5(100));        // 105"}, {"page_number": 144, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nNa czym polega \npartial application?\n73"}, {"page_number": 145, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPartial application polega na zmianie funkcji przyjmuj\u0105cej \nwiele parametr\u00f3w w funkcj\u0119, kt\u00f3ra przyjmuje mniejsz\u0105 liczb\u0119 parametr\u00f3w. Przekazane parametry b\u0119d\u0105 zwi\u0105zane z now\u0105 funkcj\u0105, dzi\u0119ki czemu nie trzeba ich za ka\u017cdym razem podawa\u0107.\nStosuj\u0105c technik\u0119 partial application mo\u017cna zaimplementow-\na\u0107 currying.\ntconst getUrl = (hostname , resource , id) => \n  `https:// ${hostname }/${resource }/${id}`;\n// partial application (hostname)\nconst getResourceUrl  = (resource , id) => \n  getUrl ('https://some.api ', resource , id);\n// https://some.api/users/123console.log(getResourceUrl ('users', 123)); "}, {"page_number": 146, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nCzym s\u0105 arrow \nfunctions?\n74"}, {"page_number": 147, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plArrow functions - funkcje strza\u0142kowe - to skr\u00f3cony spos\u00f3b \nzapisu funkcji wprowadzony od ES6. Funkcje takie maj\u0105 dodatkowe cechy u\u0142atwiaj\u0105ce pisanie kodu: nie posiadaj\u0105 swojego w\u0142asnego this, arguments ani super. \nPoniewa\u017c nie posiadaj\u0105 w\u0142asnego this, nie mog\u0105 by\u0107 wyko-\nrzystane jako konstruktory.\nNajcz\u0119\u015bciej s\u0105 wykorzystywane do tworzenia funkcji anoni-\nmowych lub znajduj\u0105cych si\u0119 poza obiektem. \nt//\u00a0mo\u017cna\u00a0pomin\u0105\u0107\u00a0()\u00a0przy\u00a0jednym\u00a0parametrze\nconst capitalize  = str => str.toUpperCase ();\nconst adder = (a, b, c) => a + b + c;\n//\u00a0b\u0142\u0105d!\u00a0zapisze\u00a0name\u00a0w\u00a0global\u00a0scopeconst Dog = name => this .name = name; \nnew Dog('Spark'); // Dog is not a constructor!"}, {"page_number": 148, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFUNKCJE\nCo to funkcje \nanonimowe?\n75"}, {"page_number": 149, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcje anonimowe s\u0105 to funkcje, kt\u00f3re nie posiadaj\u0105 nazwy. \nNajcz\u015bciej s\u0105 wykorzystywane w sytuacjach, w kt\u00f3rych nazwa funkcji nie ma znaczenia.\nMo\u017cna je przypisa\u0107 do zmiennych, u\u017cywa\u0107 jako callback lub \nprzekazywa\u0107 jako parametr podczas wywo\u0142ania higher order \nfunction np. map , filter  lub reduce .\nPoni\u017cej przyk\u0142ady funkcji anonimowych: 1) klasycznej,  \n2) zapisanej jako arrow function, 3) przypisanej do zmiennej.\ntconst courses  = ['react ', 'angular '];\ncourses.map(function  (course ) {              // 1\n    return course.toUpperCase ();\n});\ncourses.map(course => course .toUpperCase ()); // 2\nconst capitalize  = str => str.toUpperCase (); // 3\ncourses.map(capitalize );"}, {"page_number": 150, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nDo czego s\u0142u\u017cy \npreventDefault()?\n76"}, {"page_number": 151, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent.preventDefault()  jest funkcj\u0105, kt\u00f3rej wywo\u0142anie \npowoduje przerwanie domy\u015blnej obs\u0142ugi zdarzenia. Oznac -\nza to, \u017ce domy\u015blna akcja przypisana zdarzeniu nie zostanie \nwykonana, przyk\u0142adowo, nie zostanie przes\u0142any formularz po zatwierdzeniu go przyciskiem submit, natomiast nie zostanie przerwana propagacja tego zdarzenia.\nWywo\u0142anie tej metody na zdarzeniu, kt\u00f3re nie jest cancel -\nlable, np. utworzone przez EventTarget.dispatchEvent()  \nbez podawania cancellable:true  nie przyniesie efekt\u00f3w.\ntconst user = document .getElementById ('username ');\nuser.addEventListener ('keypress ', function (evt) {                    \n  const charCode  = evt.charCode;\n  if (charCode  < 97 || charCode  > 122) {\n    evt.preventDefault ();    //\u00a0tylko\u00a0ma\u0142e\u00a0litery\n  }\n}, false);"}, {"page_number": 152, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nDo czego s\u0142u\u017cy \nstopPropagation()?\n77"}, {"page_number": 153, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent.stopPropagation()  jest funkcj\u0105, kt\u00f3rej wywo\u0142anie \npowoduje przerwanie propagacji zdarzenia niezale\u017cnie czy \njest to bubbling, czy capturing. \nWywo\u0142anie tej metody nie spowoduje jednak, \u017ce domy\u015blne \nakcje przypisane do zdarzenia nie zostan\u0105 wykonane. Aby im \nzapobiec, nale\u017cy u\u017cy\u0107 Event.preventDefault() .\ntconst elem = document .getElementById ('tablecell ');\nelem.addEventListener ('click', function  (evt) {\n    evt.stopPropagation ();\n}, false);t<table id=\"table \" onclick =\"alert('hello! ');\">\n  <tr id=\"tablerow \">\n    <td id=\"tablecell \">click here!</ td>\n  </tr>\n</table>"}, {"page_number": 154, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nJak zmieni\u0107 URL \nbez prze\u0142adowania strony?\n78"}, {"page_number": 155, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby zmieni\u0107 URL nale\u017cy skorzysta\u0107 z interfejsu History, kt\u00f3ry \npozwala na modyfikowanie historii sesji przegl\u0105darki. \nPosiada on metody pushState()  oraz replaceState() , kt\u00f3re \npozwalaj\u0105 na dodawanie oraz modyfikowanie wpis\u00f3w historii \nprzegl\u0105darki, r\u00f3wnie\u017c dotycz\u0105cych bie\u017c\u0105cej strony.\nZmiana url jest mo\u017cliwa r\u00f3wnie\u017c starym sposobem, poprzez \nwindow.location.href , ale opr\u00f3cz zmiany URL spowoduje \nto tak\u017ce prze\u0142aduje stron\u0119.tconst state = { 'page_id ': 1, 'user_id ': 5 }\nconst title = 'Hello World! '\nconst url = 'hello-world.html '\nhistory.pushState (state, title, url)"}, {"page_number": 156, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nJak wywo\u0142a\u0107 \nredirect?\n79"}, {"page_number": 157, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby przekierowa\u0107 u\u017cytkownika na inn\u0105 stron\u0119 i wywo\u0142a\u0107 \nredirect mo\u017cna skorzysta\u0107 z \n\u2022 interfejsu Location, pozwalaj\u0105cego na zmiany URL, lub\n\u2022 interfejsu History, s\u0142u\u017c\u0105cego do tworzenia i modyfi-kowania historii przegl\u0105darki. \nt// zachowanie podobne do HTTP redirect\nwindow.location. replace('https://www.fiszkijs.pl ')\n//\u00a0zachowanie\u00a0podobne\u00a0do\u00a0za\u0142adowania\u00a0stronywindow.location. assign('https://www.fiszkijs.pl ')\n//\u00a0zachowanie\u00a0podobne\u00a0do\u00a0klikni\u0119cia\u00a0w\u00a0linkwindow.location.href = 'https://www.fiszkijs.pl '\n//\u00a0zachowanie\u00a0jak\u00a0przy\u00a0klikni\u0119ciu\u00a0'Wstecz'\u00a0window.history. back()\n//\u00a0mo\u017cna\u00a0cofa\u0107\u00a0histori\u0119\u00a0o\u00a0dowoln\u0105\u00a0liczb\u0119window.history. go(-1)"}, {"page_number": 158, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nJak odczyta\u0107 adres \nstrony w JavaScript?\n80"}, {"page_number": 159, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby odczyta\u0107 adres strony z poziomu JavaScript, nale\u017cy \nskorztysta\u0107 z interfejsu Location, przechowuj\u0105cego infor -\nmacje o URL.\ntconst url = window .location;\n//\u00a0https://fiszkijs.pl:8080/pl-PL/search?q=URL#js\nurl.href   \n url.origin     //\u00a0https://fiszkijs.pl:8080\nurl.protocol   // https:\nurl.host       //\u00a0fiszkijs.pl:8080\nurl.hostname   //\u00a0fiszkijs.pl\nurl.port       // 8080\nurl.pathname   //\u00a0/pl-PL/search\nurl.search     //\u00a0?q=URL\nurl.hash       // #js"}, {"page_number": 160, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nZ jakich element\u00f3w \nsk\u0142ada si\u0119 URL?\n81"}, {"page_number": 161, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDo manipulowania URL w JavaScript s\u0142u\u017cy interfejs Location, \nkt\u00f3ry jest dost\u0119pny jako global object. Obiekt location posiada, m.in.\n href      - pe\u0142ny adres URL\n protocol  - HTTP (bez SSL) lub HTTPS (z SSL)\n hostname  - Nazwa hosta, np. fiszkijs.pl\n port      - Numer portu, np. 8081\n pathname  - \u015acie\u017cka do zasobu, np. /en-US/search\n hash      - Anchor (kotwica), np. #js\n search    - Dodatkowe parametry zapytania wraz z \"?\", \nnp. ?q=react\n host      - Nazwa hosta razem z portem,  \nnp. fiszkijs.pl:8081"}, {"page_number": 162, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nCzym s\u0105 data \nattributes?\n82"}, {"page_number": 163, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plData attributes w postatci data-*  tworz\u0105 dodatkowy zestaw \natrybut\u00f3w i pozwalaj\u0105 na przesy\u0142anie dodatkowych informacji \npomidzy stron\u0105 HTML a jej reprezentacj\u0105 DOM.\nWszystkie data attributes s\u0105 dost\u0119pne poprzez interfejs \nHTMLElement  elementu, na kt\u00f3rym zosta\u0142y umieszczone. \nAtrybuty mo\u017cna odczyta\u0107 po stronie JavaScript za pomoc\u0105 metody getAttribute()  lub elementu dataset  (nazwa \natrybutu zostanie zmieniona na camelCase), np.\nt<div id=\"auth \" data-user-name =\"Bo\" data-id =\"123\">\nconst elem = document .getElementById ('auth');\nelem.getAttribute ('data-user-name '); // Bo\nelem.getAttribute ('id');             // 123\nelem.dataset .userName;               // Bo\nelem.dataset .id;                     // 123"}, {"page_number": 164, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy load a  \nDOMContentLoaded ?\n83"}, {"page_number": 165, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZdarzenie DOMContentLoaded jest odpalane w momencie, \ngdy ca\u0142a strona HTML jest za\u0142adowana bez czekania na po-\nbranie pozosta\u0142ych skrypt\u00f3w lub arkuszy CSS. Wa\u017cne jest, aby pozosta\u0142e zasoby by\u0142y pobierane w spos\u00f3b asynchroniczny.  \nW przeciwnym razie parsowanie zostanie wstrzymane.\nZ kolei zdarzenie load jest odpalane po pe\u0142nym za\u0142adowaniu \nstrony ze wszystkimi zale\u017cno\u015bciami, skryptami i obrazkami. \ntdocument .addEventListener ('DOMContentLoaded ', (event) => {\n    console.log('DOM fully loaded and parsed ');\n});\nwindow.addEventListener ('load', (event) => {\n    console.log('Entire page is fully loaded ');\n});window.onload = (event ) => {\n    console.log('Entire page is fully loaded ');\n};"}, {"page_number": 166, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nCzym jest  \noperator void?\n84"}, {"page_number": 167, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plOperator void postawiony przed danym wyra\u017ceniem \nspowoduje, \u017ce zostanie ono wykonane, jednak zwr\u00f3cony wynik zostanie zmieniony na undefined. Stosujemy je w miejscach, gdzie wyra\u017cenie powinno si\u0119 wykona\u0107, ale nie oczekujemy wyniku.\nPrzyk\u0142adowo, mo\u017cna stworzy\u0107 link, po klikni\u0119ciu kt\u00f3rego \nzostanie wykonany kod, ale nie nast\u0105pi przekierowanie na now\u0105 stron\u0119:\nt<a href=\"javaScript:void(0); \" \n   onclick=\"alert('Dobra robota! ')\">\n  Kliknij tutaj!\n</a><a href=\"javascript:void(document.body.style.\nbackgroundColor='red'); \">\n\u00a0\u00a0Kliknij\u00a0tutaj\u00a0i\u00a0zmie\u0144\u00a0t\u0142o!</a>"}, {"page_number": 168, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plBROWSER\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy window a document?\n85"}, {"page_number": 169, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWindow to interfejs reprezentuj\u0105cy okno (lub tab) wraz z \nza\u0142adowanym dokumentem DOM. \nZawiera wiele funkcji i obiekt\u00f3w, kt\u00f3re s\u0105 dost\u0119pne global-\nnie. Mo\u017cna si\u0119 do niego odwo\u0142a\u0107 poprzez obiekt window  lub \ndocument.defaultView .\nZ kolei Document to interfejs reprezentuj\u0105cy stron\u0119 za\u0142ad-\nowan\u0105 w oknie przegl\u0105darki i stanowi punkt dost\u0119pu do \ndrzewa DOM. Jest dost\u0119pny globalnie przez document  lub \nwindow.document .\ntdocument .defaultView  === window \nwindow.document === document  "}, {"page_number": 170, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCOOKIES\nCzym s\u0105  \ncookies?\n86"}, {"page_number": 171, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCookies to dane, kt\u00f3re serwer wysy\u0142a do przegl\u0105darki \ninternetowej u\u017cytkownika, kt\u00f3ra mo\u017ce je przechowywa\u0107 i wysy\u0142a\u0107 ponownie do tego samego serwera wraz z kolejnym \u017c\u0105daniem. \nS\u0105 u\u017cywane do okre\u015blenia czy dwa \u017c\u0105dania pochodz\u0105 od \ntego samego u\u017cytkownika i s\u0105 sposobem na zapami\u0119tanie informacji o stanie sesji pomimo bezstanowej natury HTTP. Istnieje opcja ustawienia daty wyga\u015bni\u0119cia lub czasu trwania, po kt\u00f3rych ciasteczko nie b\u0119dzie wysy\u0142ane.\nCookies s\u0105 wykorzystywane do: \n\u2022 zarz\u0105dzania sesj\u0105, \n\u2022 obs\u0142ugi koszyk\u00f3w sklep\u00f3w internetowych, \n\u2022 przechowywania preferencji u\u017cytkownika oraz \n\u2022 \u015bledzenia i analizy jego zachowa\u0144"}, {"page_number": 172, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCOOKIES\nJakie znasz opcje  \ncookie?\n87"}, {"page_number": 173, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajwa\u017cniejsze opcje stosowane przy obs\u0142udze cookie:\n\u2022 Domy\u015blnie cookie jest usuwane w momencie zamkni\u0119-\ncia przegl\u0105darki, ale mo\u017cna utworzy\u0107 trwa\u0142e ciasteczka, \nkt\u00f3re wygasaj\u0105 w konkretnym terminie Expires  lub po \nokre\u015blonym czasie Max-Age\n\u2022 Domain  okre\u015bla dozwolon\u0105 domen\u0119 oraz pozwala na \ndo\u0142\u0105czenie subdomen, np. Domain=fiszkijs.pl  obe-\njmuje r\u00f3wnie\u017c https://blog.fiszkijs.pl\n\u2022 Path  okre\u015bla dozwolon\u0105 \u015bcie\u017ck\u0119 URL, np. /product\n\u2022 HttpOnly  sprawia, \u017ce ciasteczka s\u0105 niedost\u0119pne z \npoziomu JavaScript document.cookie\n\u2022 Zastosowanie Secure  powoduje, \u017ce ciasteczko mo\u017ce \nby\u0107 wys\u0142ane do serwera tylko przez HTTPS"}, {"page_number": 174, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCOOKIES\nJak tworzone s\u0105 \ncookies?\n88"}, {"page_number": 175, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCookies s\u0105 tworzone przez przegl\u0105dark\u0119 po odebraniu \nodpowiedzi od serwera, kt\u00f3ra zawiera nag\u0142\u00f3wek Set-Cookie. \ntdocument .cookie = \"selected_course=React \";tHTTP/2.0 200 OK\nContent-type : text/html\nSet-Cookie : selected_course =react\n[content]\ntGET /demo.html HTTP /2.0\nHost:\u00a0www.fiszkijs.pl\nCookie: selected_course =reactNastepnie do ka\u017cdego kolejnego \u017c\u0105dania wys\u0142anego do tej strony internetowej, przegl\u0105darka do\u0142\u0105czy nag\u0142\u00f3wek Cookie z zawarto\u015bci\u0105 w postaci klucz-warto\u015b\u0107.\nIstnieje spos\u00f3b na tworzenie cookies z poziomu JavaScript \npoprzez u\u017cycie Document.cookie, jednak nie jest to spos\u00f3b bezpieczny. Lepiej przechowywa\u0107 dane w localStorage, sessionStorage lub IndexedDB."}, {"page_number": 176, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCOOKIES\nW jaki spos\u00f3b \nodczyta\u0107 cookies?\n89"}, {"page_number": 177, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby odczyta\u0107 list\u0119 cookie powi\u0105zanych z bie\u017c\u0105c\u0105 stron\u0105, \nmo\u017cna skorzysta\u0107 z document.cookie , kt\u00f3re zwraca list\u0119 \nciasteczek rozdzielon\u0105 \u015brednikami, przyk\u0142adowo: \nW ten spos\u00f3b mo\u017cna uzyska\u0107 dost\u0119p tylko do ciasteczek, \nkt\u00f3re nie maj\u0105 ustawionej flagi HttpOnly. \nAby ogranicza\u0107 mo\u017cliwo\u015bci przeprowadzenia ataku cross-\nsite scripting (XSS), ciasteczka HttpOnly s\u0105 niedost\u0119pnie z poziomu JavaScript. Mo\u017cna je tylko wysy\u0142a\u0107 do serwera.t// selected_course=react; username=Bob\nconsole.log(document .cookie)\n// [selected_course=react, username=Bob]console.log(document .cookie. split('; '))"}, {"page_number": 178, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCOOKIES\nJak usun\u0105\u0107 \ncookie?\n90"}, {"page_number": 179, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNie istnieje funkcja pozwalaj\u0105ca na usuni\u0119cie cookie \nbezpo\u015brednio, jednak mo\u017cna to zrobi\u0107 w spos\u00f3b po\u015bredni poprzez ustawienie parametru expires na przesz\u0142\u0105 dat\u0119, przyk\u0142adowo: \nNie trzeba przy tym zna\u0107 aktualnej warto\u015bci ciasteczka, \nwystarczy podanie klucza, pod jakim zosta\u0142o zapisane. \nWa\u017cne jest ustawienie parametru path, poniewa\u017c wi\u0119kszo\u015b\u0107 \nprzegl\u0105darek automatycznie ten parametr do ciasteczka, nawet je\u015bli nie zosta\u0142 podany w momencie tworzenia. Bez niego nie b\u0119dzie mo\u017cliwe usuni\u0119cie cookie.tdocument .cookie = \"selected_course=; \" \n      + \"expires=Wed, 01 Jan 2020 00:00:00 UTC; \"\n      + \"path=/; \";"}, {"page_number": 180, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plHTTP\nJakie s\u0105 metody \n\u017c\u0105da\u0144 HTTP?\n91"}, {"page_number": 181, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSpecyfikacja HTTP okre\u015bla metody \u017c\u0105da\u0144 wskazuj\u0105ce na \nakcj\u0119, kt\u00f3ra ma by\u0107 wykonana na zasobie:\n\u2022 GET - pobranie zasobu; parametry s\u0105 przekazywane w \nadresie \u017c\u0105dania\n\u2022 POST  - przes\u0142anie danych do serwera; parametry s\u0105 \nzapisane w ciele zapytania\n\u2022 PUT - zmiana zasobu, lub jego aktualizacja; je\u017celi zas\u00f3b \nnie istnieje po stronie serwera, zostanie utworzony\n\u2022 DELETE  - usuni\u0119cie zasobu na serwerze\n\u2022 HEAD  - podobny do \u017c\u0105dania GET, ale nie zwraca zawar -\nto\u015bci zasobu; jest u\u017cywane do pobrania metadanych o zasobie w postaci nag\u0142\u00f3wk\u00f3w HTTP, np. sprawdzenia czy zas\u00f3b si\u0119 ostatnio zmieni\u0142\n\u2022 OPTIONS  - s\u0142u\u017cy do pobrania informacji na temat tego, \njakie \u017c\u0105dania s\u0105 obs\u0142ugiwane przez serwer"}, {"page_number": 182, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plHTTP\nCzym jest \nCORS?\n92"}, {"page_number": 183, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plCORS, czyli Cross-Origin Resource Sharing jest mecha-\nnizmem pozwalaj\u0105cym aplikacjom dzia\u0142aj\u0105cym na jedym adre-sie origin na dost\u0119p do zasob\u00f3w zdefiniowanych na innym \nadresie. Przyk\u0142adowo https://fiszkijs.pl  wysy\u0142a request \ndo https://www.googleapis.com/gmail/v1/\nZe wzgl\u0119d\u00f3w bezpiecze\u0144stwa przegl\u0105darki domy\u015blnie bloku-\nj\u0105 mo\u017cliwo\u015b\u0107 wykonywania takich zapyta\u0144. \nAby je umo\u017cliwi\u0107, serwer, do kt\u00f3rego trafi takie zapytanie, \nmusi w odpowiedzi umie\u015bci\u0107 nag\u0142\u00f3wek \nAccess-Control-Allow-Origin: *  lub lepiej  \nAccess-Control-Allow-Origin: https://fiszkijs.pl"}, {"page_number": 184, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plHTTP\nNa czym polega \npolityka  same-origin?\n93"}, {"page_number": 185, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSame-origin to mechanizm bezpiecze\u0144stwa, kt\u00f3ry zapobie-\nga wysy\u0142aniu \u017c\u0105da\u0144 HTTP z poziomu JavaScript do serwera dzia\u0142aj\u0105cego na innym origin definiowanym jako po\u0142\u0105czenie protok\u00f3\u0142 + host + port. \nPrzyk\u0142adowo do danych zapisanych przez\nhttps://store.company.com/page.html\nmo\u017cna uzyska\u0107 dost\u0119p z (inna \u015bcie\u017cka)\nhttps://store.company.com/checkout/page.html\nnatomiast nie mo\u017cna z (inny protok\u00f3\u0142)\nhttp://store.company.com/page.html\nAby umo\u017cliwi\u0107 dost\u0119p do danych pomi\u0119dzy r\u00f3\u017cnymi origin \nnale\u017cy skorzysta\u0107 z mechanizmu CORS, czyli Cross-Origin Resource Sharing."}, {"page_number": 186, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plHTTP\nNa czym polega \nidempotentno\u015b\u0107?\n94"}, {"page_number": 187, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plIdempotentno\u015b\u0107 metod HTTP polega na tym, \u017ce identyczne \n\u017c\u0105dania wysy\u0142ane wielokrotnie maj\u0105 ten sam efekt. \nJe\u017celi zostan\u0105 zaimplementowane poprawnie po stronie \nserwera, idempotentne s\u0105 metody: \n\u2022 GET - za ka\u017cdym razem zwraca ten sam zas\u00f3b \n\u2022 HEAD  - za ka\u017cdym razem zwraca te same metadane\n\u2022 PUT - je\u015bli encja nie istnieje, utworzy j\u0105, a ka\u017cdy kolejny \nrequest b\u0119dzie j\u0105 aktualizowa\u0142\n\u2022 DELETE  - usunie encj\u0119 przy pierwszym wywo\u0142aniu, \nkolejne zwr\u00f3c\u0105 kod 404\nNatomiast metoda POST  nie jest idempotentna, poniewa\u017c \nka\u017cdy request powoduje utworzenie nowej encji po stronie serwera."}, {"page_number": 188, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plHTTP\nJak wykona\u0107  \nzapytanie HTTP?\n95"}, {"page_number": 189, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW JavaScript zapytania HTTP najlepiej wykonywa\u0107 za pomoc\u0105 \nFetch API, kt\u00f3re ma interfejs podobny u\u017cywanego wcze\u015bniej XMLHttpRequest, ale korzysta z Promise, dzi\u0119ki czemu ma prostsze API bez potrzeby u\u017cywania callback\u00f3w. \nNajwa\u017cniejsz\u0105 metod\u0105 jest fetch() , kt\u00f3ra przyjmuje jeden \nobowi\u0105zkowy parametr - \u015bcie\u017ck\u0119 do zasobu. Zwraca Promise, \nkt\u00f3ry opakowuje Response. Drugi argument nie jest obow-i\u0105zkowy i s\u0142u\u017cy do konfigurowania \u017c\u0105dania, przyk\u0142adowo:\ntfetch('./api/v1/products ', {\n  method : 'post',\n  headers : {\n    \"Content-type \": \"application/x-www-form-urlencoded \"\n  },\n  body: 'name=fiszki&category=js '\n}).then(response  => console .log(response .json()))\n  .catch(err => console.log(err));"}, {"page_number": 190, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nW jakich stanach \nmo\u017ce wystpowa\u0107 Promise?\n96"}, {"page_number": 191, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPromise mo\u017ce wyst\u0119powa\u0107 w trzech r\u00f3\u017cnych stanach: \n\u2022 Pending (w trakcie) - domy\u015blny stan, w kt\u00f3rym jest \nPromise zanim zostanie wykonana; z tego stanu mo\u017ce przej\u015b\u0107 zar\u00f3wno do stanu fulfilled, jak i do rejected\n\u2022 Fulfilled (zako\u0144czone) - oznacza zako\u0144czenie obs\u0142ugi\n\u2022 Rejected (odrzucone) - oznacza niepowodzenie. W tej sytacji zostanie rzucony wyj\u0105tek, kt\u00f3ry nale\u017cy obs\u0142u\u017cy\u0107 \nObs\u0142uga Promise, kt\u00f3ry znajduje si\u0119 w stanie fulfilled, lub rejected jest zako\u0144czona, w zwi\u0105zku z tym Promise nie mo\u017ce zmienia\u0107 dalej stanu na inny.\nWarto\u015b\u0107 Promise, kt\u00f3rego obs\u0142uga zosta\u0142a zako\u0144czona nie \nmo\u017ce ulec zmianie."}, {"page_number": 192, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nNa czym polega \nPromise chaining?\n97"}, {"page_number": 193, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPromise chaining polega na \u0142\u0105czeniu i wykonywaniu se-\nkwencji operacji asynchronicznych jedna po drugiej. \nJest alternatyw\u0105 dla tworzenia skomplikowanego kodu opar -\ntego na callbackach, kt\u00f3ry cz\u0119sto prowadzi do callback hell.\nChaining opiera si\u0119 na tym, \u017ce funkcja then()  zwraca nowy \nPromise, kt\u00f3ry reprezentuje nie tylko wynik wykonania \noperacji, ale r\u00f3wnie\u017c wynik poprzednich operacji w \u0142a\u0144cuchu, przyk\u0142adowo:\ntfetch('./api/user ')\n  .then(response  => response .json())\n  .then(user => fetch (`./api/users/ ${user.id}`))\n  .then(response  => response .json())\n  .then(user => console .log(user))\n  .catch(err => console .log(err));"}, {"page_number": 194, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nDo czego s\u0142u\u017cy \nPromise.all()?\n98"}, {"page_number": 195, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcja Promise.all() s\u0142u\u017cy do \u0142\u0105czenia wielu powi\u0105zanych \noperacji asynchronicznych w jedn\u0105. \nPrzyjmuje jako parametr tablic\u0119 Promise i zwraca tablic\u0119 \nwynik\u00f3w w momencie, gdy wszystkie Promise si\u0119 zako\u0144cz\u0105. \nJe\u017celi kt\u00f3rykolwiek ze sk\u0142adowych Promise zostanie odrzuco-\nny - rejected - ca\u0142o\u015b\u0107 r\u00f3wnie\u017c zostanie odrzucona.\ntconst fetchUser  = fetch ('./api/v1/users ');\nconst fetchPrefs  = fetch ('./api/v1/prefs ');\nPromise.all([fetchUser , fetchPrefs ])\n  .then(response  => response .map(r => r.json ()))\n  .then(values => console .log(values))\n  .catch(err => console .log(err));\n// [{name: 'Bob', id: 2}, {color: 'red'}]"}, {"page_number": 196, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nDo czego s\u0142u\u017cy \nPromise.race()?\n99"}, {"page_number": 197, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plFunkcja Promise.race() przyjmuje jako parametr tablic\u0119 \nPromise i zwraca pojedynczy wynik od tego Promise, kt\u00f3ry zosta\u0142 wykonany najszybciej. \nPrzyk\u0142adowo, chc\u0105c przedstawi\u0107 u\u017cytkownikowi wyniki \nnotowa\u0144 gie\u0142dowych w jak najkr\u00f3tszym czasie, odpytujemy kilku broker\u00f3w, ale interesuje nas tylko pierwszy, najszybciej otrzymany wynik:\ntconst getStock1  = getStock ('broker1 ');\nconst getStock2  = getStock ('broker2 ');\nconst getStock3  = getStock ('broker3 ');\nPromise.race([getStock1 , getStock2 , getStock3 ])\n    .then(response  => response .json())\n    .then(stockPrice  => console .log(stockPrice ))\n    .catch(err => console .log(err));"}, {"page_number": 198, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plASYNC\nJak mo\u017cna  \nprzerwa\u0107 dzia\u0142anie Promise()?\n100"}, {"page_number": 199, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNiestety nie ma mo\u017cliwo\u015bci przerwania Promise, poniewa\u017c \njest on tylko sposobem na wykonywanie i \u0142\u0105czenie wynik\u00f3w operacji asynchronicznych. Nie ma wgl\u0105du do tego jak te operacje dzia\u0142aj\u0105, wi\u0119c nie mo\u017ce ich przerwa\u0107.\nJednym ze sposob\u00f3w na obej\u015bcie tego ograniczenia, jest \nzastosowanie Promise.race([]) , gdzie oryginalny Promise, \nnp.  getData()  \u0142\u0105czymy w tablicy z innym, np. signal , kt\u00f3ry \nmo\u017cemy zako\u0144czy\u0107 szybciej. Je\u017celi signal  zostanie wykona-\nny wcze\u015bniej, wynik getData()  b\u0119dzie zignorowany.\nJednak nawet takie rozwi\u0105zanie nie pozwala na rzeczywiste \nprzerwanie operacji asynchronicznej.\nInnym sposobem jest u\u017cycie biblioteki do programowania \nreaktywnego rxjs, kt\u00f3ra korzysta z Obervables, kt\u00f3re mo\u017cna przerwa\u0107 na \u017c\u0105danie."}, {"page_number": 200, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl101(function (){\n    var x = y = 5;\n})();\nconsole.log(typeof x);\nconsole.log(typeof y);"}, {"page_number": 201, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPoniewa\u017c zar\u00f3wno x, jak i y s\u0105 zdefiniowane wewn\u0105trz bloku \nIIFE (Immediately Invoked Function Expression), spodzi-\newanym wynikiem jest \"undefined\"  w obu przypadkach.\nOkazuje si\u0119 jednak, \u017ce var x = y = 5  nie oznacza \n var x = 5;  var y = 5; \nale \n y = 5;     \n var x = y; \nW efekcie zmienna y zostaje utworzona w global scope, a x \nw block scope. Aby zapobiec tego typu problemom, nale\u017cy stosowa\u0107 strict mode, kt\u00f3ry w tym przypadku spowoduje zg\u0142oszenie runtime error."}, {"page_number": 202, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl102const course = {\n    title : \"react \",\n    printDetails : function  () {\n        const self = this;\n        console.log(\"a = \" + this .title);\n        console.log(\"b = \" + self .title);\n        ( function  () {\n            console.log(\"c = \" + this .title);\n            console.log(\"d = \" + self .title);\n        }());\n    }};course.printDetails ();"}, {"page_number": 203, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPrzedstawiony kod wy\u015bwietli nast\u0119puj\u0105ce warto\u015bci:\n  a = react      \n  b = react        c = undefined    d = react      \nWewn\u0105trz printDetails  zar\u00f3wno this , jak i self  wskazuj\u0105 \nna ten sam obiekt course , wi\u0119c mog\u0105 odwo\u0142a\u0107 si\u0119 do w\u0142a\u015bci-\nwo\u015bci title . \nW wewn\u0119trznym bloku IIFE this  nie odnosi si\u0119 ju\u017c do obiek -\ntu course , ale do obiektu window  z global scope. \nW efekcie wywo\u0142anie this.title  zwraca undefined, podczas \ngdy self.title  nadal przechowuje poprawn\u0105 referencj\u0119 do \nobiektu course ."}, {"page_number": 204, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl103console.log(0.1 + 0.2);\nconsole.log(0.1 + 0.2 == 0.3);"}, {"page_number": 205, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPrzedstawiony kod wy\u015bwietli nast\u0119puj\u0105ce warto\u015bci:\n 0.30000000000000004 \n false               \nDzieje si\u0119 tak, poniewa\u017c liczby w JavaScript s\u0105 przechowy-\nwane jako liczby zmiennoprzecinkowe. Wynik niekt\u00f3rych prostych operacji mo\u017ce nie dawa\u0107 oczekiwanych wynik\u00f3w. \nAby wygodnie wykonywa\u0107 operacje arytmetyczne na liczbach \nzmiennoprzecinkowych w JavaScript mo\u017cna skorzysta\u0107 ze \nspecjalnej sta\u0142ej Number.EPSILON , na przyk\u0142ad:\nfunction  areEqual (num1, num2) {\n   return Math.abs(num1 - num2) < Number .EPSILON ;\n}\nconsole.log(areEqual (0.1 + 0.2, 0.3)); // true"}, {"page_number": 206, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl104(function  () {\n  console .log(1);\n  setTimeout (() => console.log(2), 1000);\n  setTimeout (() => console .log(3), 0);\n  console .log(4);\n})();"}, {"page_number": 207, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWarto\u015bci zostan\u0105 wy\u015bwietlone w nast\u0119puj\u0105cej kolejno\u015bci:\n 1  4  3  2 \nWarto\u015bci 1 oraz 4 s\u0105 wy\u015bwietlone od razu za pomoc\u0105 pros-\ntego wywo\u0142ania console.log .\nWarto\u015b\u0107 3 jest wy\u015bwietlona po op\u00f3\u017anieniu 0ms , co jednak \nnie oznacza, \u017ce jest wy\u015bwietlona natychmiast. Zgodnie z dzia\u0142aniem Event Loop, wywo\u0142anie setTimeout  umieszcza \nfunkcj\u0119 z parametru w Event Queue - kolejce zdarze\u0144 - co \nsprawia, \u017ce zostanie obs\u0142u\u017cona najwcze\u015bniej w kolejnej rundzie, podczas kolejnego ticku timera."}, {"page_number": 208, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl105for (var i = 0; i < 5; i++) {\n  setTimeout (() => console .log(i), i * 1000);\n}"}, {"page_number": 209, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone nast\u0119puj\u0105ce warto\u015bci:\n 5 // po 1 sekundzie  5 // po 2 sekundach  5 // po 3 sekundach  5 // po 4 sekundach  5 // po 5 sekundach \nU\u017cycie setTimeout  sprawia, \u017ce console.log  zostanie wyko-\nnane dopiero po zako\u0144czeniu p\u0119tli. Wykorzystanie var  spra-\nwia, \u017ce zmienna i jest dost\u0119pna w function scope r\u00f3wnie\u017c \npoza blokiem for . W efekcie wszystkie wywo\u0142ania funkcji \nconsole.log  wykorzystaj\u0105 ostatni\u0105 warto\u015b\u0107 i=5 .\nAby pozby\u0107 si\u0119 tego problemu, nale\u017cy zamieni\u0107 var  na let  \nlub opakowa\u0107 wywo\u0142anie setTimeout  w dodakowe closure."}, {"page_number": 210, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl106for (let i = 0; i < 5; i++) {\n  setTimeout (() => console .log(i), i * 1000);\n}"}, {"page_number": 211, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone nast\u0119puj\u0105ce warto\u015bci:\n 1 // po 1 sekundzie \n 2 // po 2 sekundach  3 // po 3 sekundach  4 // po 4 sekundach  5 // po 5 sekundach \nWykorzystanie let  sprawia, \u017ce zmienna i jest dost\u0119pna tylko \nwewn\u0105trz block scope i nie jest widoczna poza blokiem for . "}, {"page_number": 212, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl107const auth = {\n    accessToken : 'secret-token ',\n    getSecretToken : function  (){\n        return this.accessToken;\n    }\n};\nconst stealToken  = auth.getSecretToken;\nconsole.log(stealToken ());\nconsole.log(auth.getSecretToken ());"}, {"page_number": 213, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone nast\u0119puj\u0105ce warto\u015bci:\n undefined     secret-token \nPrzy pierwszym wywo\u0142aniu console.log  zostanie wy\u015bwiet -\nlona warto\u015b\u0107 undefined, poniewa\u017c this.accessToken  nie \nodnosi si\u0119 ju\u017c do obiektu auth , ale do obiektu window. \nPodczas drugiego wywo\u0142ania this  wskazuje na obiektu auth  \ni ma dost\u0119p do jego w\u0142a\u015bciwo\u015bci. Aby naprawi\u0107 ten problem mo\u017cna skorzysta\u0107 z funkcji bind , \nkt\u00f3ra umo\u017cliwia zmian\u0119 kontekstu wywo\u0142ania funkcji z pow-\nrotem na obiekt auth :\nconst stealToken = auth.getSecretToken.bind(auth);"}, {"page_number": 214, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl108var price = 99;\nvar getCoursePrice  = function  () {\n    console.log(price);\n    var price = 100;\n};\ngetCoursePrice ();"}, {"page_number": 215, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW tym przyk\u0142adzie wy\u015bwietlona zostanie warto\u015b\u0107 undefined .\nJest to spowodowane tym, \u017ce w JavaScript wszystkie \ndeklaracje (function , var , let , cost  i class ) s\u0105 hoistowane, \nale tylko var  s\u0105 inicjalizowane przez undefined . \nDeklaracja var price = 100;  jest wi\u0119c przenoszona na g\u00f3r\u0119 \nfunction scope jako var price; . W momencie wywo\u0142ania \nsilnik JavaScript odwo\u0142uje si\u0119 do tej lokalnej zmiennej, kt\u00f3ra \nprzes\u0142ania zmienn\u0105 istniej\u0105c\u0105 poza zakresem funkcji.   \nDeklaracja var price = 99;  nie jest w og\u00f3le wykorzystywa-\nna podczas dzia\u0142ania skryptu."}, {"page_number": 216, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl109var price = 10;\nfunction  getCoursePrice () {\n    var price = 100;\n    function  calculatePrice () {\n        price ++;\n        var price = 1000;\n        console.log(price)\n    }\n    calculatePrice ();\n}getCoursePrice ();"}, {"page_number": 217, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostanie wy\u015bwietlona warto\u015b\u0107 1000. \nW przyk\u0142adzie istniej\u0105 trzy osobne zmienne o nazwie price , \nw trzech r\u00f3\u017cnych scope. \nDekalracje tych zmiennych b\u0119d\u0105 hoistowane w g\u00f3r\u0119 swojego \nfunction scope, w efekcie czego funkcja calculatePrice  \nb\u0119dzie odczytywana w nast\u0119puj\u0105cy spos\u00f3b:\nfunction calculatePrice () {                 \n    var price;           // \"undefined\"          price++;             // NaN                  price = 1000;        // 1000                 console.log(price);                      }                                            "}, {"page_number": 218, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n110var price = 99;\nfunction  calculatePrice () {\n    price = 100;\n    return;\n    function  price() { }\n}\ncalculatePrice ();\nconsole.log(price);   "}, {"page_number": 219, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostanie wy\u015bwietlona warto\u015b\u0107 99.\nW pierwszej kolejno\u015bci deklaracja funkcji wewn\u0119trznej \nfunction price() {}  jest hoistowana w g\u00f3r\u0119 zakresu i \nzachowuje si\u0119 jak deklaracja var price = function() {} . \nPowstaje wi\u0119c lokalna zmienna price .\nPoniewa\u017c zmienne lokalne przykrywaj\u0105 globalne, wywo\u0142anie price = 100 powoduje zmian\u0119 zmiennej lokalnej, a nie \nglobalnej. \nWarto\u015b\u0107 zmiennej globalnej pozostaje nie zmieniona.\nGdyby nie istnia\u0142a deklaracja funkcji price , lub nazywa\u0142aby \nsi\u0119 inaczej, wy\u015bwietlona zosta\u0142aby warto\u015b\u0107 100."}, {"page_number": 220, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n111function  calculatePrice (){\n    function  getPrice () {\n        return 99;\n    }\n    return getPrice ();\n    function  getPrice () {\n        return 100;\n    }}console.log(calculatePrice ());"}, {"page_number": 221, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostanie wy\u015bwietlona warto\u015b\u0107 100 .\nW pierwszej kolejno\u015bci deklaracje obu funkcji wewn\u0119trznych \ngetPrice  s\u0105 hoistowane w g\u00f3r\u0119 zakresu. Powstaje lokalna \nzmienna getPrice , kt\u00f3ra zostaje natychmiast nadpisana \nprzez var getPrice = function() { return 100; }  \nW scope mo\u017ce istnie\u0107 tylko jedna zmienna o tej nazwie. Pod-czas wywo\u0142ania getPrice() , wykonywany jest kod drugiej \nfunkcji getPrice . "}, {"page_number": 222, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n112const reactCourse  = {\n    price : 59.99,\n    getPrice  : function () {\n        return this.price;\n    }\n};const vueCourse  = Object .create(reactCourse );\nvueCourse .price = 69.99;\ndelete vueCourse .price;\nconsole.log(vueCourse .getPrice ());"}, {"page_number": 223, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostanie wy\u015bwietlona warto\u015b\u0107 59.99 .\nWywo\u0142anie funkcji Object.create  tworzy nowy obiekt  \nvueCourse , kt\u00f3ry b\u0119dzie mia\u0142 reactCourse  jako rodzica.\nWarto\u015b\u0107 price  jest zapisana jedynie w obiekcie rodzica \nreactCourse . Dopiero pr\u00f3ba przypisania nowej warto\u015bci do \nprice , powoduje powstanie tej property na poziomie obiektu \ndziecka - vueCourse . Oznacza to, \u017ce pr\u00f3ba usuni\u0119cia property \nprice  powoduje usuni\u0119cie jej tylko z vueCourse . \nWywo\u0142anie getPrice  sprawdza, czy price jest dost\u0119pne w \nobiekcie vueCourse . Je\u017celi nie jest, silnik JavaScript przecho-\ndzi do obiektu rodzica i dalej, a\u017c dotrze do ko\u0144ca \u0142a\u0144cucha \nprototyp\u00f3w."}, {"page_number": 224, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl113console.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);"}, {"page_number": 225, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone nast\u0119puj\u0105ce warto\u015bci:\n true  \n false \nJest to zwi\u0105zane z tym w jaki spos\u00f3b JavaScript realizuje \n\u0142\u0105czno\u015b\u0107 operator\u00f3w < oraz >. \nTakie operacje s\u0105 realizowane od lewej do prawej strony. W \npierwszej kolejno\u015bci wykonane zostanie sprawdzenie 1 < 2 , \nkt\u00f3re da wynik true . W drugim kroku nast\u0105pi por\u00f3wnanie \ntrue < 3 , kt\u00f3re r\u00f3wnie\u017c da wynik true , poniewa\u017c lewa stro-\nna jest rzutowana na warto\u015b\u0107 1.\nAnalogicznie w drugim przypadku 1 > 2  daje false , a nas-\nt\u0119pnie false > 3  r\u00f3wnie\u017c daje wynik false , poniewa\u017c lewa \nstrona jest rzutowana na 0."}, {"page_number": 226, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl114const courses  = ['React ']\ncourses[5] = 'Angular ';\ncourses[4] = undefined\nconsole.log(courses );\nconsole.log(courses [3]);\nconsole.log(courses .map(c => 'Vue ')); "}, {"page_number": 227, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMimo \u017ce tablica posiada pocz\u0105tkowo tylko jeden element \n\"React\" , mo\u017cna do niej doda\u0107 nowy element na dowolnej \npozycji. Miejsca pomi\u0119dzy tymi elementami pozostan\u0105 puste. Dlatego tablica courses  wygl\u0105da nast\u0119puj\u0105co:\n[\"React\", empty \u00d7 3, undefined, \"Angular\"]\nCo wa\u017cne, puste miejsca s\u0105 faktycznie puste a nie wype\u0142nione \nwarto\u015bci\u0105 undefined .\nWywo\u0142anie courses[3]  daje w wyniku undefined , jednak w \nrzeczywisto\u015bci nie ma tam takiej warto\u015bci. Przetworzenie tablicy za pomoc\u0105 map(c => 'Vue')  daje \n[\"Vue\", empty \u00d7 3, \"Vue\", \"Vue\"]\nco pokazuje, \u017ce puste miejsca w tablicy zosta\u0142y zupe\u0142nie \npomini\u0119te podczas iteracji. "}, {"page_number": 228, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl115console.log(typeof typeof 1);"}, {"page_number": 229, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWywo\u0142anie typeof 1  daje w wyniku warto\u015b\u0107 \"number\" , kt\u00f3ra \njest zwyk\u0142ym stringiem. \nPonowne wywo\u0142anie typeof \"number\"  zwraca (tak samo jak \nw przypadku ka\u017cdego innego napisu) warto\u015b\u0107 \"string\" ."}, {"page_number": 230, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n116console.log(!![]);\nconsole.log([] == true)"}, {"page_number": 231, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone warto\u015bci\n true   false \nPusta tablica [] jest truthy. Nie oznacza to jednak, \u017ce taka \nwarto\u015b\u0107 jest r\u00f3wna true . Operator == przed sprawdzeniem \nr\u00f3wno\u015bci wykona rzutowanie typ\u00f3w, je\u015bli b\u0119dzie konieczne. \nPoniewa\u017c po obu stronach operatora == s\u0105 warto\u015bci r\u00f3\u017cnych \ntyp\u00f3w, JavaScript nie potrafi ich bezpo\u015brednio por\u00f3wna\u0107. \nW pierwszej kolejno\u015bci prawa strona zostanie zrzutowana do \nliczby i b\u0119dzie wynosi\u0107 1. Lewa strona zostanie przekonwer -\ntowana do \"\" za pomoc\u0105 Symbol.toPrimitive . \nW efekcie nast\u0105pi por\u00f3wnanie \"\" == 1 ,  co po kolejnym \nrzutowaniu daje 0 == 1 ."}, {"page_number": 232, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n117console.log(  'false' == false );\nconsole.log(   2 + true );\nconsole.log(  '6' + 9);\nconsole.log(  '6' - 9);\nconsole.log(   1 + 2 + \"3\");\nconsole.log(   2 in [1, 2]);1\n2\n3\n4\n5\n6"}, {"page_number": 233, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl false  - string, kt\u00f3ry nie jest pusty jest truthy.\n     3  - operator + pomi\u0119dzy liczb\u0105 a boolean przekon-\nwertuje boolean do liczby, w tym przypadku do 1\n    69  - je\u015bli po kt\u00f3rejkolwiek stronie operatora + jest \nstring, druga strona zostanie r\u00f3wnie\u017c przekonwertowa-\nna na string a nast\u0119pnie nast\u0105pi ich po\u0142\u0105czenie\n    -3  - w przypadku operatora - obie strony zostan\u0105 \nprzekonwertowane do liczby    33  - po pierwej operacji zostanie 3 + \"3\" . Liczba \nb\u0119dzie zmieniona na string i nast\u0105pi po\u0142\u0105czenie.   false  - operator in sprawdza, czy property lub \nindeks znajduje si\u0119 w obiekcie. W tym przypadku, tablica \nma indeksy 0 oraz 1, ale nie ma 21\n2\n3\n4\n5\n6"}, {"page_number": 234, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n118console.log(0 || 1);\nconsole.log(1 || 2);\nconsole.log(0 && 1);\nconsole.log(1 && 2);"}, {"page_number": 235, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone warto\u015bci w kolejno\u015bci   1, 1, 0, 2 \nPrzy korzystaniu z operatora logicznego || (OR) pocz\u0105tkowo \nlewa strona jest konwertowana na boolean. Je\u017celi jej war -\nto\u015b\u0107 jest true , prawa strona operatora nie jest wyznaczana, \na wynikiem jest lewa strona wyra\u017cenia. Je\u017celi warto\u015b\u0107 jest \nfalse , obliczona zostanie prawa strona operatora.\nOperator logiczny && (AND) sprawia, \u017ce pocz\u0105tkowo lewa strona jest kowertowana na boolean. Je\u017celi jest  false , pra-\nwa strona operatora nie jest wyznaczana. Je\u017celi warto\u015b\u0107 jest true , obliczona zostanie prawa strona operatora.\nOperatory zwracaj\u0105 warto\u015b\u0107 obliczonego wyra\u017cenia, wi\u0119c \nje\u015bli po prawej lub lewej stronie by\u0142y warto\u015bci nie b\u0119d\u0105ce boolean (np. liczby), takie warto\u015bci zostan\u0105 zwr\u00f3cone."}, {"page_number": 236, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n119const delay = () => new Promise (\n    resolve => setTimeout (resolve , 2000)\n)\nasync function  displayScore (score) {\n    await delay();\n    console.log(score);\n}async function  processScores (scores) {\n    scores.forEach (score => {\n        await displayScore (score);\n    })}processScores ([1, 2, 3, 4]);"}, {"page_number": 237, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW tym przypadku wy\u015bwietlony zostanie b\u0142\u0105d\nSyntaxError: await is only valid in async function\nJest to zwi\u0105zane ze sposobem w jaki obs\u0142ugiwane s\u0105  funkcje \nasync/await. \nMimo \u017ce funkcja processScores  jest funkcj\u0105 asynchronic -\nzn\u0105, to funkcja anonimowa znajduj\u0105ca si\u0119 wewn\u0105trz wywo\u0142a-\nnia forEach  jest synchroniczna. \nJe\u017celi u\u017cyjemy konstrukcji async/await wewn\u0105trz funkcji \nsynchronicznej, zostanie rzucony wyj\u0105tek."}, {"page_number": 238, "text": "COPYRIGHT \u00a9 2020 fiszkijs.pl`\n120const angular1  = Symbol ('Angular ');\nconst angular2  = Symbol ('Angular ');\nconst react1 = Symbol .for('React');\nconst react2 = Symbol .for('React');\nconsole.log(angular1  === angular2 );\nconsole.log(react1 === react2);"}, {"page_number": 239, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZostan\u0105 wy\u015bwietlone warto\u015b\u0107:\n false  true  \nKa\u017cdy symbol utworzony za pomoc\u0105 Symbol()  jest unikaln\u0105 \nwarto\u015bci\u0105 niezale\u017cnie od przekazanego parametru. W szcze-\ng\u00f3lno\u015bci dwa symbole utworzone z t\u0105 sam\u0105 nazw\u0105 wskazuj\u0105 na dwie r\u00f3\u017cne warto\u015bci.\nZ drugiej strony symbole utworzone przez Symbol.for()  s\u0105 \ntworzone w globalnym rejestrze symboli. \nNie oznacza to, \u017ce przy ka\u017cdym wywo\u0142aniu utworzony zost -\nanie nowy symbol. Stanie si\u0119 tak tylko, je\u015bli symbol o danym \nkluczu jeszcze nie istnieje. W przeciwnym razie zostanie zwr\u00f3cony istniej\u0105cy symbol."}, {"page_number": 240, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy <script async> a <script defer>?\n121"}, {"page_number": 241, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAtrybut async  pozwala na asynchroniczne pobieranie \nskrypt\u00f3w podczas \u0142adowania strony. Dzi\u0119ki temu skrypty po-\nbieraj\u0105 si\u0119 jednocze\u015bnie nie przerywaj\u0105c procesu renderow -\nania. Znacznie przy\u015bpiesza to \u0142\u0105czny czas za\u0142adowania strony.\n \nZ kolei atrybut defer  op\u00f3\u017ania wykonanie skrypt\u00f3w do \nczasu pe\u0142nego za\u0142adowania strony. Skrypt zostanie pobrany \nwcze\u015bniej, ale wykonany dopiero po pe\u0142nym parsowaniu stro-ny, tu\u017c przed odpaleniem zdarzenia DOMContentLoaded. //\u00a0za\u0142aduj\u00a0skrypt\u00a0bez\u00a0przerywania\u00a0renderowania\n<script src=\"courses.js \" async></script>\n//\u00a0za\u0142aduj\u00a0skrypt\u00a0po\u00a0zako\u0144czeniu\u00a0\u0142adowania\u00a0strony<script src=\"courses.js \" defer></script>"}, {"page_number": 242, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\n\u0141adowanie czcionek \nprzez <link> czy  @import?\n122"}, {"page_number": 243, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plZ punktu widzenia wydajno\u015bci strony, lepszym sposobem \njest \u0142adowanie czcionek poprzez elementy <link> , poniewa\u017c \nprzegl\u0105darki internetowe s\u0105 w stanie pobiera\u0107 je ca\u0142kowicie \nr\u00f3wnolegle. \nIstnieje mo\u017cliwo\u015b\u0107 \u0142adowania czcionek przez dodanie \ndyrektywy @import  w pliku CSS, jednak to uniemo\u017cliwia \nr\u00f3wnoleg\u0142e pobieranie zasob\u00f3w. \nPrzegl\u0105darka, parsuj\u0105c kod strony, najpierw pobierze wszyst -\nkie arkusze CSS a dopiero p\u00f3\u017aniej odczyta ich zawarto\u015b\u0107, \n\u0142\u0105cznie z dyrektywami @import . \n@import url('https://fonts.googleapis.com/... ');<link rel=\"stylesheet \" \n      href=\"https://fonts.googleapis.com/... \">"}, {"page_number": 244, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nCzym jest  \ngarbage collector?\n123"}, {"page_number": 245, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plGarbage Collector to mechanizm czyszczenia pami\u0119ci wyko-\nrzystywany w r\u00f3\u017cnych j\u0119zykach programowania.\nW Javascript stosuje si\u0119 automatyczne zarz\u0105dzanie \npami\u0119ci\u0105. Oznacza to, \u017ce gdy tworzymy nowe obiekty, jest im automatycznie przydzielana pami\u0119\u0107, a gdy nie s\u0105 ju\u017c u\u017cy-wane, s\u0105 z niej automatycznie usuwane.\nDo sprawdzenia, czy obiekt mo\u017ce zosta\u0107 usuni\u0119ty z pami\u0119ci \nmo\u017cna wykorzysta\u0107 r\u00f3\u017cne algorytmy. \nOpieraj\u0105 one swoje dzia\u0142anie na badaniu dost\u0119pno\u015bci obiek-\nt\u00f3w . Oznacza to, \u017ce je\u017celi do danego obiektu nie mo\u017cna si\u0119 \nw \u017caden spos\u00f3b odwo\u0142a\u0107 (nie ma do niego \u017cadnej referenc -\nji), staje si\u0119 on nieu\u017cywalny, a wi\u0119c i mo\u017ce by\u0107 usuni\u0119ty z pami\u0119ci."}, {"page_number": 246, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nJakie znasz algorytmy \ngarbage collectora?\n124"}, {"page_number": 247, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajprostszym algorytmem jest algorytm liczenia odwo\u0142a\u0144 \ndo obiektu - Reference Counting Algorithm, w kt\u00f3rym obiekt mo\u017ce zosta\u0107 usuni\u0119ty z pami\u0119ci, je\u015bli nie ma do niego \u017cadnych odwo\u0142a\u0144. \nBy\u0142 stosowany w starszych przegl\u0105darkach, jednak posiada \nwad\u0119 polegaj\u0105c\u0105 na tym, \u017ce obiekty, kt\u00f3re maj\u0105 referencje do siebie nawzajem, nie zostan\u0105 nigdy usuni\u0119te, co prowadzi do wyciek\u00f3w pami\u0119ci. \nObecnie w JavaScript wykorzystywany jest algorytm Mark \nand Sweep. Sprawdza on czy do ka\u017cdego obiektu mo\u017cna uzyska\u0107 dost\u0119p zaczyn\u0105c od g\u0142\u00f3wnego obiektu, kt\u00f3rym w przypadku przegl\u0105darki jest obiekt window. \nDzi\u0119ki temu poprawnie wykrywa obiekty kt\u00f3re maj\u0105 \ncykliczne zale\u017cno\u015bci mi\u0119dzy sob\u0105."}, {"page_number": 248, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nNa czym polega  \nReference Counting  \nAlgorithm?\n125"}, {"page_number": 249, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAlgorytm liczenia odwo\u0142a\u0144 do obiektu - Reference Counting \nAlgorithm usuwa obiekt z pami\u0119ci, je\u015bli nie ma do niego \u017cadnych odwo\u0142a\u0144. Na przyk\u0142ad po wykonaniu poni\u017cszego \nkodu, oryginalny obiekt { title: 'React' }  nie jest \ndost\u0119pny przez \u017cadn\u0105 referencj\u0119 wi\u0119c mo\u017ce zosta\u0107 usuni\u0119ty:\nJednak obiekty, kt\u00f3re maj\u0105 referencje do siebie nawzajem, \nnie zostan\u0105 nigdy usuni\u0119te. let reactCourse  = { title : 'React ' };\nlet angularCourse  = { title : 'Anguar ' };\nreactCourse  = {};\nfunction  foo() {\n    let reactCourse = { title : 'React ' };\n    let angularCourse = { title : 'Anguar ' };\n    reactCourse.prerequiste = angularCourse;\n    angularCourse.prerequiste = reactCourse;\n}"}, {"page_number": 250, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nNa czym polega  \nalgorytm  Mark and Sweep?\n126"}, {"page_number": 251, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAlgorytm Mark and Sweep sprawdza czy do ka\u017cdego obiek -\ntu mo\u017cna uzyska\u0107 dost\u0119p zaczyn\u0105c od g\u0142\u00f3wnego obiektu, \nkt\u00f3rym w przegl\u0105darce jest obiekt window. \nPodczas dzia\u0142ania, algorytm oznacza wszystkie obiekty \ndost\u0119pne z window, nast\u0119pnie wszystkie obiekty dost\u0119pne z tych ju\u017c oznaczonych itd. \nW ten spos\u00f3b oznaczy (mark) wszystkie u\u017cywane i dost\u0119pne \nobiekty. Te, kt\u00f3re nie zosta\u0142y oznaczone, s\u0105 przeznaczone do usuni\u0119cia (sweep).\nDzi\u0119ki temu poprawnie wykrywa obiekty kt\u00f3re nie maj\u0105 ref -\nerencji z zewn\u0105trz oraz takie, kt\u00f3re maj\u0105 cykliczne zale\u017cno\u015bci \nmi\u0119dzy sob\u0105."}, {"page_number": 252, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nCo to jest  \nmemory leak?\n127"}, {"page_number": 253, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plMemory leak to pami\u0119\u0107, kt\u00f3ra jest aktualnie zaj\u0119ta, ale nie \njest potrzebna do dzia\u0142ania aplikacji. Innymi s\u0142owy zosta\u0142a za-j\u0119ta przez obiekty, kt\u00f3re nie s\u0105 ju\u017c potrzebne, ale nie zosta\u0142y usuni\u0119te z pami\u0119ci.\nW JavaScript do wyciek\u00f3w dochodzi najcz\u0119\u015bciej na skutek:\n\u2022 przypadkowego utworzenia zmiennych globalnych, np. \nprzez pomini\u0119cie s\u0142owa kluczowego var , let  lub const\n\u2022 niepoprawnego u\u017cycia this  wewn\u0105trz funkcji\n\u2022 b\u0142\u0119dnego u\u017cycia w\u0142asnor\u0119cznie stworzonego cache, \npowoduj\u0105cego jego niekontrolowany rozrost\n\u2022 pozostawienia dzia\u0142aj\u0105cej funkcji setInterval\n\u2022 przechowywania referencji do element\u00f3w DOM  - nawet \ngdy zostan\u0105 ju\u017c usuni\u0119te z drzewa DOM"}, {"page_number": 254, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nJak zoptymalizowa\u0107 \nzu\u017cycie zasob\u00f3w?\n128"}, {"page_number": 255, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby zoptymalizowa\u0107 zu\u017cycie zasob\u00f3w przez stron\u0119 interne-\ntow\u0105 mo\u017cna zmniejszy\u0107 rozmiar pobieranych plik\u00f3w lub poprawi\u0107 jako\u015b\u0107 transferu. W tym celu nale\u017cy:\n\u2022 Zminifikowa\u0107 pliki *.js , *.css , *.html\n\u2022 W\u0142\u0105czy\u0107 kompresj\u0119 gzip dla przesy\u0142anych zasob\u00f3w\n\u2022 Zoptymalizowa\u0107 rozmiar, jako\u015b\u0107 i kompresj\u0119 obraz\u00f3w\n\u2022 Zoptymalizowa\u0107 pliki *.svg  poprzez usuni\u0119cie niepotr -\nzebnych metadanych\n\u2022 Ograniczy\u0107 rozmiar strony poprzez usuni\u0119cie bia\u0142ych znak\u00f3w, komentarzy i nieu\u017cywanego kodu\n\u2022 Ograniczy\u0107 rozmiar skrypt\u00f3w poprzez tree shaking\n\u2022 \u0141adowa\u0107 skrypty asynchronicznie tam gdzie jest to \nmo\u017cliwe poprzez <script async>  \n\u2022 Op\u00f3\u017ani\u0107 wykonanie skrypt\u00f3w do czasu za\u0142adowania strony tam gdzie to mo\u017cliwe przez <script defer>"}, {"page_number": 256, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nJak zwi\u0119kszy\u0107  \nperformance strony?\n129"}, {"page_number": 257, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby poprawi\u0107 performance strony internetowej mo\u017cna:\n\u2022 Wykorzysta\u0107 HTTP/2, kt\u00f3re korzysta z multipleksingu i \npozwala na obs\u0142ug\u0119 wielu zapyta\u0144 jednocze\u015bnie\n\u2022 Ograniczy\u0107 liczb\u0119 przesy\u0142anych plik\u00f3w\n\u2022 Ograniczy\u0107 liczb\u0119 request\u00f3w do serwis\u00f3w znajduj\u0105cych si\u0119 na innych domenach\n\u2022 Wykorzysta\u0107 cache do przechowywania cz\u0119sto u\u017cy-wanych danych oraz referencji do element\u00f3w DOM\n\u2022 Wykorzysta\u0107 lazy-loading do \u0142adowania skrypt\u00f3w\n\u2022 \u0141adowa\u0107 tylko skrypty, kt\u00f3re s\u0105 wymagane a ca\u0142\u0105 resz-\nt\u0119 op\u00f3\u017ani\u0107, np. poprzez u\u017cycie <script defer>\n\u2022 Usun\u0105\u0107 z kodu skrypty inline, kt\u00f3re wyd\u0142u\u017caj\u0105 proces \nodczytu i przetworzenia strony\n\u2022 Wykorzysta\u0107 kompresj\u0119 plik\u00f3w gzip\n\u2022 Ograniczy\u0107 liczb\u0119 zale\u017cno\u015bci do innych bibliotek JS"}, {"page_number": 258, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPERFORMANCE\nJak odnale\u017a\u0107  \nmemory leak  w aplikacji?\n130"}, {"page_number": 259, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAby odnale\u017a\u0107 memory leak w kodzie JavaScript mo\u017cna si\u0119 \npos\u0142u\u017cy\u0107 zestawem narz\u0119dzi Chrome Devtools, na przyk\u0142ad:\n\u2022 Za pomoc\u0105 Chrome Task Manager (Shift + Esc ) \ndodaj do tabeli kolumn\u0119 z JavaScript memory aby zobaczy\u0107 zu\u017cycie pami\u0119ci\n\u2022 Przeanalizuj zu\u017cycie pami\u0119ci w czasie za pomoc\u0105 Per -\nformance recordings - otw\u00f3rz Devtools (F12), panel Performance i zaznacz Memory. Mo\u017cesz zaobserwowa\u0107 jak ro\u015bnie zu\u017cycie pami\u0119ci JS Heap, liczba element\u00f3w DOM lub liczba event listener\u00f3w. Na wykresie b\u0119dzie r\u00f3wnie\u017c wida\u0107 dzia\u0142anie garbage collectora. \n\u2022 Wyszukaj elementy detached DOM - czyli takie, kt\u00f3re zosta\u0142y od\u0142\u0105czone od g\u0142\u00f3wnego drzewa - w panelu Memory wykonaj Heap Snapshot a nast\u0119pnie wyszukaj elementy o nazwie zaczynaj\u0105cej si\u0119 od Detached..."}, {"page_number": 260, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo to jest  \nWeakSet?\n131"}, {"page_number": 261, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWeakSet to struktura danych przechowuj\u0105ca tylko obiekty \nposiadaj\u0105ce s\u0142abe referencje. Je\u017celi nie istnieje referencja wskazuj\u0105ca na obiekt w kolekcji, to mo\u017ce on zosta\u0107 usuni\u0119ty z pami\u0119ci przez garbage collector. Zapobiega w ten spos\u00f3b powstawaniu wyciek\u00f3w pami\u0119ci.\nTa cecha sprawia, \u017ce nadaje si\u0119 doskonale do przechowywan-\nia informacji o du\u017cej liczbie cz\u0119sto tworzonych obiekt\u00f3w.\nWeakSet oferuje zestaw operacji zbli\u017cony do tego ze \nzwyk\u0142ego Set: \nconst weakSet  = new WeakSet ();\nconst course = { title : 'React ' };\nweakSet.add(course);\nweakSet.has(course);    // true\nweakSet.delete(course); // usuwa kurs ze zbioru\nweakSet.has(course);    // false"}, {"page_number": 262, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo odr\u00f3\u017cnia  \nWeakSet od Set?\n132"}, {"page_number": 263, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajwa\u017cniejsz\u0105 r\u00f3\u017cnic\u0105 miedzy Set a WeakSet polega na tym, \n\u017ce Set przechowuje zwyk\u0142e referencje do obiekt\u00f3w a Weak -\nSet s\u0142abe referencje. \nOznacza to, \u017ce obiekt w WeakSet mo\u017ce zosta\u0107 usuni\u0119ty \nz pami\u0119ci przez garbage collector je\u015bli nie ma do niego \u017cadnych innych referencji spoza kolekcji. \nDodatkowo:\n\u2022 Set mog\u0105 przechowywa\u0107 dowolne warto\u015bci, natomiast \nWeakSet tylko obiekty\n\u2022 WeakSet nie posiada w\u0142a\u015bciwo\u015bci size  - nie mo\u017cna \nsprawdzi\u0107 liczby obiekt\u00f3w w zbiorze\n\u2022 WeakSet nie posiada metod clear , keys , values , \nentries , forEach  - uniemo\u017cliwia iterowanie po \nobiektach kolekcji"}, {"page_number": 264, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo to jest  \nWeakMap?\n133"}, {"page_number": 265, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plWeakMap to struktura danych przechowuj\u0105ca kolekcj\u0119 \ndanych w postaci par klucz-warto\u015b\u0107, gdzie kluczami sa obiek -\nty posiadaj\u0105ce s\u0142abe referencje a warto\u015bciami dane dowolne-go typu. \nJe\u017celi jaki\u015b klucz w mapie nie posiada referencji wskazuj\u0105-\ncych na siebie, to mo\u017ce on zosta\u0107 usuni\u0119ty z pami\u0119ci przez garbage collector. \nZapobiega w ten spos\u00f3b powstawaniu wyciek\u00f3w pami\u0119ci.\nconst weakMap  = new WeakMap ();\nconst course = { title : 'React ' };\nweakMap.set(course, 12);\nweakMap.has(course);    // true\nweakMap.delete(course); // usuwa kurs\nweakMap.has(course);    //\u00a0false,\u00a0kurs\u00a0usuni\u0119ty"}, {"page_number": 266, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCo odr\u00f3\u017cnia   \nWeakMap od Map?\n134"}, {"page_number": 267, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajwa\u017cniejsz\u0105 r\u00f3\u017cnic\u0105 miedzy Map a WeakMap polega na \ntym, \u017ce w WeakMap przechowywane klucze maj\u0105 s\u0142abe referencje. \nOznacza to, \u017ce je\u017celi do takiego klucza nie ma zewn\u0119trznych \nreferencji, mo\u017ce on zosta\u0107 usuni\u0119ty z kolekcji i z pami\u0119ci przez garbage collector.\nDodatkowo:\n\u2022 Map mo\u017ce przechowywa\u0107 klucze dowolnego typu a \nWeakMap tylko obiekty\n\u2022 WeakMap nie posiada w\u0142a\u015bciwo\u015bci size  - nie mo\u017cna \nsprawdzi\u0107 liczby obiekt\u00f3w w mapie\n\u2022 WeakMap nie posiada metod clear , keys , values , \nentries , forEach  - uniemo\u017cliwia iterowanie po \nkluczach lub warto\u015bciach mapy"}, {"page_number": 268, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCzym jest \nbarrel w ES6?\n135"}, {"page_number": 269, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPocz\u0105wszy od ES6 barrel to spos\u00f3b na po\u0142\u0105czenie danych ek -\nsportowanych z r\u00f3\u017cnych modu\u0142\u00f3w w jeden modu\u0142, z kt\u00f3rego \nmo\u017cna wygodnie korzysta\u0107 w kodzie aplikacji.\nBarrel jest zwyk\u0142ym modu\u0142em ES6, kt\u00f3ry eksportuje dane \neksportowane wcze\u015bniej przez inne modu\u0142y. Przyk\u0142adowo:\n// courses/index.js (plik barell)\nexport * from './js';\nexport * from './react ';\nexport * from './vue';\n// app.jsimport {\n    JsCourse,    ReactCourse,    VueCourse} from '../courses ';"}, {"page_number": 270, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nCzym jest  \nTypedArray?\n136"}, {"page_number": 271, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plTypedArray to obiekt przypominaj\u0105cy tablic\u0119 i przechowuj\u0105-\ncy dane binarne. Co prawda nie istnieje globalna property o nazwie TypedArray, ale istniej\u0105 odmiany TypedArray przys-tosowane do obs\u0142ugi r\u00f3\u017cnych typ\u00f3w danych, przyk\u0142adowo:\n\u2022 Int8Array , Int16Array , Int32Array   \ntablice liczb ze znakiem\n\u2022 Uint8Array , Uint16Array , Uint32Array   \ntablice liczb bez znaku\n\u2022 Float32Array , Float64Array   \ntablice liczb zmiennoprzecinkowych\nPrzyk\u0142adowo, aby utworzy\u0107 tablic\u0119 liczb 32-bitowych:\nconst bytes = 1024;\nconst arr = new Int32Array (bytes);"}, {"page_number": 272, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy obiektami typu host i native?\n137"}, {"page_number": 273, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObiekty typu native to obiekty, kt\u00f3rych semantyka, dzia\u0142anie \ni zachowanie jest okre\u015blone przez specyfikacj\u0119 ECMAScript. \nDo takich obiekt\u00f3w nale\u017c\u0105 przyk\u0142adowo: Object , Date , Math , \nRegExp , Function , itp. \nZ drugiej strony obiekty typu host to obiekty dostarczane \nprzez \u015brodowisko, w kt\u00f3rym dzia\u0142a JavaScript - prze -\ngl\u0105darka, lub silnik nodeJS V9. Do takich obiekt\u00f3w nale\u017c\u0105 \n(w \u015brodowisku przegl\u0105darki) window , document , location , \nhistory , XmlHttpRequest , itp.\nIstnieje r\u00f3wnie\u017c trzecia kategoria obiekt\u00f3w - user, czyli \nobiekty u\u017cytkownika. Nale\u017ca do niej wszystkie pozosta\u0142e obiekty tworzone w kodzie."}, {"page_number": 274, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nJakie warto\u015bci mo\u017ce \nprzyjmowa\u0107 this?\n138"}, {"page_number": 275, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plW zale\u017cno\u015bci od bie\u017c\u0105cego kontekstu wywo\u0142ania funkcji, \nthis mo\u017ce przyjmowa\u0107 nast\u0119puj\u0105ce warto\u015bci:\n\u2022 W global scope lub wewn\u0105trz funkcji wskazuje na window ,\n\u2022 Wewn\u0105trz IIFE, gdy u\u017cywany jest \"use strict\" , this jest \nundefined .\n\u2022 Podczas wywo\u0142ania metody w obiekcie wskazuje na ten obiekt.\n\u2022 Wewn\u0105trz setTimeout  wskazuje na obiekt window\n\u2022 W konstruktorze wskazuje na nowo tworzony obiekt.\n\u2022 Podczas wywo\u0142ania bind , call  lub apply  wskazuje na \nobiekt przekazany jako pierwszy parametr\n\u2022 Podczas obs\u0142ugi zdarze\u0144 DOM wskazuje na element DOM, kt\u00f3ry by\u0142 \u017ar\u00f3d\u0142em zdarzenia."}, {"page_number": 276, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nDo czego s\u0142u\u017cy \nIterator?\n139"}, {"page_number": 277, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plIterator jest to obiekt, kt\u00f3ry wie jak uzyska\u0107 dost\u0119p do \nelement\u00f3w kolekcji. Dostarcza metod\u0119 next() , kt\u00f3ra zwraca \nnast\u0119pny obiekt w sekwencji, kt\u00f3ry posiada dwie w\u0142a\u015bciwo\u015b-ci: done  i value . Przyk\u0142adami obietk\u00f3w kt\u00f3re implementuj\u0105 \nIterator s\u0105: Array, String, Map, Set.\nIterator\u00f3w mo\u017cna u\u017cywa\u0107 w kontek\u015bcie:\n\u2022 spread operator, np. [...courses]\n\u2022 p\u0119tli for...of\n\u2022 tworzenia tablicy za pomoc\u0105 Array.from()\n\u2022 konstruktor\u00f3w new Map([iterable]) ,  \nnew Set([iterable]) , new WeakMap([iterable]) , \nnew WeakSet([iterable])\n\u2022 metod Promise, np. Promise.all([iterable]) , \nPromise.race([iterable])"}, {"page_number": 278, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plJAVASCRIPT\nDo czego s\u0142u\u017cy \nGenerator?\n140"}, {"page_number": 279, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plGenerator to funkcja, kt\u00f3ra dzia\u0142a jak fabryka iterator\u00f3w. \nTworzy si\u0119 je za pomoc\u0105 konstrukcji function*  oraz z wyko-\nrzystaniem operatora yield . \nGeneratory obliczaj\u0105 zwracan\u0105 warto\u015b\u0107 na \u017c\u0105danie, co jest \nprzydane szczeg\u00f3lnie, gdy operacje s\u0105 kosztowne lub po-tencjalnie niesko\u0144czone, na przyk\u0142ad:\nfunction*  idGenerator () {\n    let id = 0;\n    while(true) {\n        yield ++id;\n    }\n}let generator = idGenerator ();\ngenerator. next() // {value: 1, done: false}\ngenerator. next() // {value: 2, done: false}\ngenerator. next() // {value: 3, done: false}"}, {"page_number": 280, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSECURITY\nJakie znasz sposoby \nna popraw\u0119 bezpiecze\u0144stwa   \naplikacji JavaScript?\n141"}, {"page_number": 281, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plDo poprawy bezpiecze\u0144stwa aplikacji JavaScript mo\u017cna \nwykorzysta\u0107 nast\u0119puj\u0105ce techniki:\n\u2022 Hashowanie hase\u0142 za pomoc\u0105 silnego algorytmu, np. SHA-256 lub bcrypt wraz z dodan\u0105 warto\u015bci\u0105 salt\n\u2022 Dodawanie do formularzy losowej warto\u015bci, aby zapo-biec atakom CSRF\n\u2022 U\u017cywanie nag\u0142\u00f3wk\u00f3w CORS do definiowania do-puszczalnych zachowa\u0144 Cross-Origin (CORS)\n\u2022 Szyfrowanie zawarto\u015bci plik\u00f3w cookie oraz innych danych zapisanych po stronie klienta\n\u2022 Stosowania flagi HttpOnly dla ciasteczek\n\u2022 Walidowanie danych wprowadzanych przez u\u017cytkowni-ka pod k\u0105tem atak\u00f3w Cross Site Scripting\n\u2022 Wy\u0142\u0105czenie autouzupe\u0142niania najbardziej wra\u017cliwych danych u\u017cytkownika\n\u2022 Unikanie funkcji eval"}, {"page_number": 282, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSECURITY\nJak zabezpieczy\u0107 \ncookie?\n142"}, {"page_number": 283, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plNajwa\u017cniejsze poczas obs\u0142ugi ciasteczek jest zapewnienie, \naby dane by\u0142y przesy\u0142ane w spos\u00f3b zaszyfrowany.\nW tym celu nale\u017cy ograniczy\u0107 u\u017cycie ciasteczek tylko do stron \nbezpiecznych, u\u017cywaj\u0105cych odpowiedniego szyfrowania. \nOznacza to, \u017ce dane z ciasteczek nie b\u0119d\u0105 przesy\u0142ane do \nstrony, kt\u00f3ra nie u\u017cywa protoko\u0142u SSL/HTTP. \nAby oznaczy\u0107 ciasteczko jako Secure nale\u017cy skorzysta\u0107 z:\ndocument.cookie = \"secret=test;secure\";\nDodatkowo nale\u017cy ustawi\u0107 nast\u0119puj\u0105ce parametry:\n\u2022 HttpOnly \u2013 cookie nie mo\u017ce by\u0107 odczytane w JS,\n\u2022 Domain\u2013 nazwa domeny,\n\u2022 Path \u2013 dok\u0142adna nazwa \u015bcie\u017cki na domenie,\n\u2022 Expires \u2013 okre\u015bla do kiedy cookie jest wa\u017cne\n\u2022 Max-Age - okre\u015bla po jakim czasie cookie traci wa\u017cno\u015b\u0107"}, {"page_number": 284, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSECURITY\nNa czym polega atak \nCross-site Scripting?\n143"}, {"page_number": 285, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAtak Cross-site Scripting (XSS) polega na wstrzykni\u0119ciu \nkodu do prawid\u0142owo dzia\u0142aj\u0105cej strony internetowej lub aplikacji webowej, co umo\u017cliwia atakuj\u0105cemu wykonanie z\u0142o\u015bliwych akcji w zaatakowanym systemie oraz uzyskanie \ndost\u0119pu do localStorage , sessionStorage  oraz cookies .\nNajpopularniejsz\u0105 form\u0105 tego ataku jest znalezienie pola <input> , kt\u00f3rego warto\u015b\u0107 nie jest w \u017caden spos\u00f3b walid-\nowana ani czyszczona po stronie aplikacji. Atakuj\u0105cy wpisuje w pole <input>  fragment kodu JavaScript, kt\u00f3ry nast\u0119pnie \nzostanie zapisany w bazie danych i wy\u015bwietlony w innych \nmiejscach systemu jako dane u\u017cytkownika. \nAby zabezpieczy\u0107 stron\u0119 przed atakiem XSS nale\u017cy zawsze \nczy\u015bci\u0107 i sprawdza\u0107 zawarto\u015b\u0107 formularzy wprowadzanych przez u\u017cytkownika."}, {"page_number": 286, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSECURITY\nNa czym polega atak \nCross-site Request Forgery?\n144"}, {"page_number": 287, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAtak Cross-site Request Forgery (CSRF) jest atakiem, w \nkt\u00f3rym atakuj\u0105cy wykonuje w imieniu ofiary \u017c\u0105danie HTTP korzystaj\u0105c z jej uprawnie\u0144, np. zapisanych w cookie.\nNajpopularniejsza forma tego ataku polega na znalezieniu \nniechronionego formularza, z kt\u00f3rego korzysta ofiara. Atakuj\u0105cy preparuje \u017c\u0105danie HTTP pod ten sam adres co formularz, ale z wykorzystaniem z\u0142o\u015bliwych danych. Gdy u\u017cyt -\nkownik wy\u015ble spreparowane \u017c\u0105danie, przegl\u0105darka do\u0142\u0105czy do niego zawarto\u015b\u0107 plik\u00f3w cookie, co mo\u017ce spowodowa\u0107 wykonanie w systemie akcji, o kt\u00f3rej u\u017cytkownik nie wiedzia\u0142.\nAby zabezpieczy\u0107 si\u0119 przed atakiem CSRF nale\u017cy do ka\u017cdego \nformularza doda\u0107 losow\u0105 warto\u015b\u0107 - token CSRF, kt\u00f3rego obecnosc i poprawno\u015b\u0107 b\u0119dzie zweryfikowana po stronie serwera po otrzymaniu \u017c\u0105dania."}, {"page_number": 288, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plSECURITY\nNa czym polega atak \nServer-side  JavaScript Injection?\n145"}, {"page_number": 289, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plAtak Server-side JavaScript Injection jest atakiem wymier -\nzonym w cz\u0119\u015b\u0107 backendow\u0105 aplikacji, najcz\u0119\u015bciej napisan\u0105 w \nNode.js. \nUmo\u017cliwia on atakuj\u0105cemu wykonanie z\u0142o\u015bliwego kodu na \nserwerze, co mo\u017ce okaza\u0107 si\u0119 bardzo powa\u017cne w skutkach, g\u0142\u00f3wnie z powodu uzyskania bezpo\u015bredniego dost\u0119pu do bazy danych.\nAby unikn\u0105\u0107 tego ataku nale\u017cy pozby\u0107 si\u0119 wywo\u0142a\u0144 funkcji \neval, kt\u00f3ra jest bardzo podatna na tego typu ataki i umo\u017cli-wia wykonanie dowolnego kodu JavaScript. \nDodatkowo nale\u017cy pami\u0119ta\u0107, \u017ceby nigdy nie u\u017cywa\u0107 warto\u015bci \nwprowadzonych do systemu przez u\u017cytkownika zanim nie zostan\u0105 zwalidowane i oczyszczone."}, {"page_number": 290, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nJaka jest r\u00f3\u017cnica \nmi\u0119dzy Obfuscation a Encryption?\n146"}, {"page_number": 291, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plObfuskacja - zaciemnianie kodu - to proces, w trakcie \nkt\u00f3rego zmieniany jest wygl\u0105d kodu, w taki spos\u00f3b, aby utrudni\u0107 jego odczytanie i analizowanie przez cz\u0142owieka. Z punktu widzenia parsera JavaScript jest to nadal poprawny kod. Do przeprowadzenia procesu nie jest potrzebny klucz.\nObfuskacj\u0119 przeprowadza si\u0119, aby:\n\u2022 zmniejszy\u0107 rozmiar kodu i przy\u015bpieszy\u0107 jego transfer\n\u2022 ukry\u0107 logik\u0119 biznesow\u0105 zapisan\u0105 w kodzie\n\u2022 utrudni\u0107 analiz\u0119 kodu osobom trzecim\nSzyfrowanie - encryption - polega na zamianie formatu kodu \nna format niemo\u017cliwy do oczytania bez posiadania klucza szyfruj\u0105cego. Przeprowadza si\u0119 je, aby zabezpieczy\u0107 kod przed oczytaniem przez osoby nie posiadaj\u0105ce uprawnie\u0144."}, {"page_number": 292, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym jest \nevent table?\n147"}, {"page_number": 293, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plEvent Table - tabela zdarze\u0144 - jest to struktura danych, \nkt\u00f3ra przechowuje informacje na temat zarejestrowanych zdarze\u0144 asynchronicznych, kt\u00f3re zostan\u0105 wykonane po za-ko\u0144czeniu pewnych akcji, na przyk\u0142ad po up\u0142yni\u0119ciu zdanego czasu, lub odebraniu odpowiedzi z serwera HTTP. \nPrzyk\u0142adowo, podczas ka\u017cdego wywo\u0142ania operacji asyn-\nchronicznej takiej jak setTimeout  do Event Table dodawany \njest wpis zawieraj\u0105cy informacj\u0119 o funkcji, kt\u00f3ra ma zosta\u0107 \nwykonana po up\u0142yni\u0119ciu czasu okre\u015blonego przez parametr \nsetTimeout .\nGdy to nastapi, funkcja jest przekazywana do Event Queue w \ncelu kontynuowania przetwarzania."}, {"page_number": 294, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCo to jest  \nTemporal Dead Zone?\n148"}, {"page_number": 295, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plTemporal Dead Zone to sytuacja w kodzie, w kt\u00f3rym zmi-\nenne s\u0105 wykorzystywane przed ich deklaracj\u0105. Pr\u00f3ba odczytu lub zapisu takich zmiennych powoduje b\u0142\u0105d ReferenceError. \nTemporal Dead Zone dotyczy tylko zmiennych deklarow-\nanych za pomoc\u0105 s\u0142\u00f3w kluczowych let  i const . Zmienne \ndeklarowane przez var  s\u0105 hoistowane i inicjalizowane \nwarto\u015bci\u0105 undefined nawet przed deklaracj\u0105 \nCzas pomi\u0119dzy odwo\u0142aniem si\u0119 do zmiennej a jej deklaracj\u0105 \nto w\u0142a\u015bnie Temporal Dead Zone, przyk\u0142adowo:\nfunction  printCourseDetails () {\n    console.log(maxStudents);  //\u00a0undefined\n    console.log(courseLength); // ReferenceError\n    var maxStudents = 12;\n    let courseLength = 30;\n}"}, {"page_number": 296, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nCzym jest  \nservice worker?\n149"}, {"page_number": 297, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plService worker to skrypt JavaScript, kt\u00f3ry jest wykonywa-\nny w tle, tj. oddzielnie od kodu JavaScript wykonywanego na stronie. Dostarcza funkcjonalno\u015bci, kt\u00f3re nie wymagaj\u0105 dost\u0119pu do DOM ani interakcji z u\u017cytkownikiem. \nWykorzystuje si\u0119 je do \n\u2022 obs\u0142ugi offline strony i implementacji PWA , \n\u2022 synchronizacji danych z zewn\u0119trznymi serwisami, \n\u2022 wysy\u0142ania notyfikacji push, \n\u2022 przechwytywania i ob\u0142ugi \u017c\u0105da\u0144 HTTP oraz \n\u2022 zarz\u0105dzania cache, przydatnych w przypadku cz\u0119stego \nwykonywania takich samych \u017c\u0105da\u0144 HTTP.\nService worker nie ma bezpo\u015bredniego dost\u0119pu do DOM, ale mo\u017ce si\u0119 komunikowa\u0107 ze stron\u0105 poprzez metod\u0119  \npostMessage  i w ten spos\u00f3b sterowa\u0107 wy\u015bwietlaniem strony."}, {"page_number": 298, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plPOJ\u0118CIA\nDo czego s\u0142u\u017c\u0105 \nserver-sent events?\n150"}, {"page_number": 299, "text": "COPYRIGHT \u00a9 2020 fiszkijs.plServer-sent events (SSE) to technologia pozwalaj\u0105ca serwe-\nrowi na wysy\u0142anie informacji do przegl\u0105darki w dowolnym momencie. SSE tworzy jednokierunkowy kana\u0142 komunikac -\nji, co oznacza, \u017ce zdarzenia mog\u0105 p\u0142yn\u0105\u0107 tylko od serwera do przegl\u0105darki. \nTakie rozwi\u0105zanie jest przydatne przy implementowaniu \ninterfejs\u00f3w u\u017cytkownika, kt\u00f3re wy\u015bwietlaj\u0105 cz\u0119sto zmie-niaj\u0105ce si\u0119 dane, np. notowania gie\u0142dowe, wiadomo\u015bci na Twitterze lub informacje na stonie u\u017cytkownika Facebooka.\nImplementacja SSE opiera si\u0119 na interfejsie EventSource , \nkt\u00f3ry pozwala na otwarcie kana\u0142u komunikacji z serwerem  \nHTTP, za pomoc\u0105 kt\u00f3rego serwer b\u0119dzie wysy\u0142a\u0142 zdarzenia \nw formacie text/event-stream . Po\u0142\u0105czenie pozostanie \notwarte do momentu wywo\u0142ania EventSource.close() ."}]